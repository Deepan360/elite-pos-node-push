<!DOCTYPE html>
<html lang="en">
<head>
    {{>header}}
    <style>
        #manufacturerform {
            display: block;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #8f8f8f;
            /* White background for the form */
            padding: 20px;
            z-index: 1000;
            width: 900px;
            font-size: small;
            /* Ensure it's above other elements */
            border-radius: 10px;
        }
        #editForm {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #8f8f8f;
            padding: 20px;
            z-index: 1000;
            border-radius: 10px;
            width: 900px;
            font-size: small;
        }
    </style>
    <style>
        .container {
            margin-left: 20%;
        }
        .updateManufacturer {
            background-color: rgba(50, 141, 168) !important;
            color: white !important;
            border: none !important;
            width: 80px !important;
            height: 30px;
        }
        .closeForm {
            background-color: rgba(50, 141, 168) !important;
            color: white !important;
            border: none !important;
            border-radius: 3px !important;
            width: 80px !important;
            height: 30px;     
        }
        button {
            margin: 1px;
        }
        #message {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #ffffff;
            color: black;
            padding: 20px;
            z-index: 1000;
            size: 200px;
            font-weight: 700;
            justify-content: space-between;
            align-content: space-between;
            align-items: center;
            font-size: 14px;
            box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.3) !important;
            border-radius: 8px;
            overflow: hidden;
        }
        form input {
            margin: 2px;
        }
        form button {
            width: 100px !important;
            padding: 5px;
            margin: 5px;
        }
        .col input {
            width: 100%;
        }
        input[type=checkbox] {
            width: 100px;
            color: #8f8f8f !important;
        }
  .molecule-list {
            border: 1px solid #ccc;
            min-height: 150px;
            padding: 10px;
            margin: 10px 0;
            overflow: auto;
        }
        .molecule-item {
            padding: 5px;
            margin: 5px;
            cursor: grab;
            border: 1px solid #ddd;
            border-radius: 5px;
            color: rgb(255, 255, 255);
            background-color: #34495E;
        }
        .molecule-item.dragging {
            opacity: 0.5;
        }
        .combination-container {
            color: rgb(13, 13, 117);
        }
    </style>
</head>
<body class="g-sidenav-show   bg-gray-100">
    {{>sidebar}}
    <main class="main-content position-relative border-radius-lg ">
        {{>navbar}}
        <div class="table-responsive container-fluid py-4  ">
            <div class=" form-control card ">
                <h3>List Of Combination Molecules</h3>

                <form action="/auth/combinedmolecules" method="get">
                    <table id="customerTable" class="table-responsive justify-content-between align-items-end"
                        style="width:100% !important">

                        <thead>
                            <tr>
                                <th>Id</th>
                                <th>Combination Code</th>
                                <th>Combination Name</th>
                                <th class="action">Action</th>
                            </tr>
                        </thead>
                        <tbody>

                        </tbody>

                    </table>
                    <button type="button" value="button" class="btn btn-primary" id="addmanufacturer">add</button>
                </form>


            </div>

        </div>
        </div>
        </div>
        {{>color}}
        {{>footer}}
    </main>
    <div id="alertModal" class="modal fade" tabindex="-1" role="dialog">
        <div class="modal-dialog modal-dialog-centered" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Notification</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <p id="modalMessage">Your message here</p>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
    <script>
         function showBootstrapModal(message) {
                // Set the message in the modal
                $('#modalMessage').text(message);

                // Show the modal
                var myModal = new bootstrap.Modal(document.getElementById('alertModal'));
                myModal.show();
            }
        document.addEventListener('DOMContentLoaded', function () {
            var messageElement = document.getElementById('message');
            if (messageElement) {
                setTimeout(function () {
                    messageElement.style.display = 'none';
                }, 1000); 
            }
        });
    </script>
<script>
    document.addEventListener('DOMContentLoaded', function () {
        // Fetch and populate molecules as before
        async function fetchMolecules() {
            try {
                const response = await fetch('/auth/molecules');
                const data = await response.json();
                console.log('Fetched molecules:', data); // Debugging
                populateMoleculeSelect(data.data);
            } catch (error) {
                console.error('Error fetching molecules:', error);
            }
        }

        function populateMoleculeSelect(molecules) {
            const availableMolecules = document.getElementById('availableMolecules');
            const editAvailableMolecules = document.getElementById('editAvailableMolecules');

            availableMolecules.innerHTML = '';
            editAvailableMolecules.innerHTML = '';

            molecules.forEach(molecule => {
                const moleculeItem = document.createElement('div');
                moleculeItem.className = 'molecule-item';
                moleculeItem.draggable = true;
                moleculeItem.textContent = molecule.moleculename;
                moleculeItem.dataset.moleculename = molecule.moleculename;

                availableMolecules.appendChild(moleculeItem.cloneNode(true));
                editAvailableMolecules.appendChild(moleculeItem.cloneNode(true));
            });

            addDragAndDropHandlers();
        }

        function addDragAndDropHandlers() {
            const draggables = document.querySelectorAll('.molecule-item');
            const containers = document.querySelectorAll('.molecule-list');

            draggables.forEach(draggable => {
                draggable.addEventListener('dragstart', () => {
                    draggable.classList.add('dragging');
                });

                draggable.addEventListener('dragend', () => {
                    draggable.classList.remove('dragging');
                });
            });

            containers.forEach(container => {
                container.addEventListener('dragover', e => {
                    e.preventDefault();
                });

                container.addEventListener('drop', e => {
                    e.preventDefault();
                    const dragging = document.querySelector('.dragging');
                    if (dragging && !container.contains(dragging)) {
                        container.appendChild(dragging);
                        const form = container.closest('form');
                        const input = form.querySelector('input[name="combinationname"]') || form.querySelector('input[name="editCombinationname"]');
                        if (container.classList.contains('combination-container')) {
                            updateCombinationName(container, input);
                        } else {
                            const sourceContainer = document.querySelector('.combination-container');
                            const sourceInput = form.querySelector('input[name="combinationname"]') || form.querySelector('input[name="editCombinationname"]');
                            updateCombinationName(sourceContainer, sourceInput);
                        }
                    }
                });
            });
        }

        function updateCombinationName(container, input) {
            const items = container.querySelectorAll('.molecule-item');
            const combinationName = Array.from(items).map(item => item.dataset.moleculename).join(' + ');
            input.value = combinationName;
        }

        async function populateEditForm(combinationId) {
            try {
                const response = await fetch(`/auth/combinedmolecules/${combinationId}`);
                const data = await response.json();

                console.log("Fetched data for combination ID:", data); // Debug: Verify the fetched data

                if (data && data.combinationcode && data.combinationname) {
                    document.getElementById('editId').value = data.id || '';
                    document.getElementById('editCombinationcode').value = data.combinationcode || '';
                    document.getElementById('editCombinationname').value = data.combinationname || '';

                    const editCombinationContainer = document.getElementById('editCombinationContainer');
                    editCombinationContainer.innerHTML = ''; // Clear existing items

                    // Populate the combination container with molecules
                    const moleculeNames = (data.combinationname || '').split(' + ');
                    moleculeNames.forEach(moleculeName => {
                        const moleculeItem = document.createElement('div');
                        moleculeItem.className = 'molecule-item';
                        moleculeItem.draggable = true;
                        moleculeItem.textContent = moleculeName;
                        moleculeItem.dataset.moleculename = moleculeName;
                        editCombinationContainer.appendChild(moleculeItem);
                    });

                    // Reinitialize the drag and drop handlers
                    addDragAndDropHandlers();

                    // Ensure the combination name field reflects the correct order
                    updateCombinationName(editCombinationContainer, document.getElementById('editCombinationname'));
                } else {
                    console.error('No valid data returned for ID:', combinationId);
                }
            } catch (error) {
                console.error('Error populating edit form:', error);
            }
        }

        function updateCombinationName(container, input) {
            const items = container.querySelectorAll('.molecule-item');
            const combinationName = Array.from(items).map(item => item.dataset.moleculename).join(' + ');
            input.value = combinationName;
        }

        fetchMolecules();

        $(document).on('click', '#addmanufacturer', function () {
            $("#manufacturerform").show();
            $("#id").val('');
            // Reset form fields if necessary
            $("#manufacturerform")[0].reset();
            document.getElementById('combinationContainer').innerHTML = ''; // Clear container
        });

        var table = $("#customerTable").DataTable({
            debug: true,
            ajax: {
                'url': '/auth/combinedmolecules',
                'dataType': 'json',
                'dataSrc': 'data',
                type: 'GET',
            },
            columns: [
                { data: 'id' },
                { data: 'combinationcode' },
                { data: 'combinationname' },
                {
                    data: 'id',
                    render: function (data) {
                        return '<i class="fa-solid fa-trash deleteBtn" type="button" data-id="' + data + '"></i>';
                    }
                }
            ],
            dom: 'Bfrtip',
            buttons: ['copy', 'excel', 'pdf', 'csv'],
            paging: false,
            scrollY: '480px',
            scrollX: '100px',
            scrollCollapse: true,
            responsive: true,
            "bInfo": true,
            "bBorders": true,
        });

        if (table.rows().count() === 0) {
            $("#emptyMessage").show();
        }

        $(document).on('click', '.editBtn', function () {
            var data = table.row($(this).parents('tr')).data();
            console.log('Data:', data);

            if (data && typeof data === 'object' && !Array.isArray(data)) {
                $(".editForm #editId").val(data.id);
                $(".editForm #combinationcode").val(data.combinationcode);
                $(".editForm #combinationname").val(data.combinationname);
                $(".editForm").show();
            } else {
                console.error('Invalid or undefined data:', data);
            }
        });

        $(document).on('submit', '.editForm', function (event) {
            event.preventDefault();

            var formData = $(this).serialize();
            var customerId = $(".editForm #editId").val();


            $.ajax({
                type: 'PUT',
                url: '/auth/combinedmoleculesedit/' + customerId,
                data: formData,
                success: function (response) {
                    console.log(response);

                    if (response.success) {
                        var tableRow = table.row('#' + customerId); 
                        tableRow.data(response.updatedCustomerData); 

                        // Optionally, you can hide the form after a successful update
                        $(".editForm").hide();
                       
                        table.ajax.reload();
                         alert('Customer Updated Successfully 🖋');
                    } else {
                        alert('Failed to update customer');
                    }
                },
                error: function (error) {
                    console.error('Error:', error);

                    if (error.status === 0) {
                        alert('Failed to connect to the server. Check your server and network connection.');
                    } else {
                        alert('Failed to update customer. Check the console for more details.');
                    }
                }
            });
        });




        $(document).on('click', '#closeForm, #closeEditForm', function () {
            $("#manufacturerform, #editForm").hide();
        });

        $(document).on('click', '.deleteBtn', function () {
            var data = table.row($(this).parents('tr')).data();
            var deleteButton = $(this);  

            if (data && data.id) {
                var deleteUrl = '/auth/combinedmoleculesdelete/' + data.id;
                console.log('Data:', data);

                $.ajax({
                    type: 'DELETE',
                    url: deleteUrl,
                    success: function (response) {
                        console.log(response);
                        if (response.success) {
                             showBootstrapModal('Deleted Successfully 🖋');
                            table.ajax.reload();
                        } else {
                            alert("Failed to delete customer: " + response.error);
                        }
                    },
                    error: function (error) {
                        console.error('Error deleting customer:', error);
                        alert("Failed to delete customer. Check console for details.");
                    }
                });
            } else {
                console.error('Invalid or undefined data:', data);
            }
        });
    });

</script>
<div class="container mt-4">
    <form id="manufacturerform" style="display: none;" method="post" action="/auth/combinedmolecules">
        <div class="row">
            <div class="col-md-12">
                <input type="hidden" name="id" id="id">
                <input type="text" placeholder="Combination Code No" name="combinationcode" id="combinationcode">
                <div class="row">
                    <div class="col">
                        <h4>Available Molecules</h4>
                        <div id="availableMolecules" class="molecule-list"></div>
                    </div>
                    <div class="col">
                        <h4>Combination Container</h4>
                        <div id="combinationContainer" class="molecule-list combination-container"></div>
                    </div>
                </div>
            </div>
            <input type="text" placeholder="Combination Name" name="combinationname" id="combinationname" readonly required>
        </div>
        <button type="submit" class="btn btn-primary" id="saveManufacturer">Save</button>
        <button type="button" class="btn btn-primary" id="closeForm">Close</button>
    </form>

<form id="editForm" class="editForm" style="display: none;" method="post" action="/auth/combinedmoleculesedit">
    <div class="row">
        <div class="col-md-12">
            <input type="hidden" name="id" id="editId">
            <input type="text" placeholder="Combination Code No" name="combinationcode" id="combinationcode">
            <div class="row">
                <div class="col">
                    <h4>Available Molecules</h4>
                    <div id="editAvailableMolecules" class="molecule-list"></div>
                </div>
                <div class="col">
                    <h4>Combination Container</h4>
                    <div id="editCombinationContainer" class="molecule-list combination-container"></div>
                </div>
            </div>
        </div>
        <input type="text" placeholder="Combination Name" name="combinationname" id="combinationname" required>
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
    <button type="button" class="btn btn-primary" id="closeEditForm">Close</button>
</form>

</div>
<script>
    $("#closeForm").click(function () {
        $(".editForm").hide();
    });
</script>
</body>
</html>

