<!DOCTYPE html>
<html lang="en">
<head>
  {{> header}}
  <style>
    #manufacturerform {
      display: block;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #8f8f8f; /* White background for the form */
      padding: 20px;
      z-index: 1000; /* Ensure it's above other elements */
      border-radius: 10px;
    }

    .editForm {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #8f8f8f;
      padding: 20px;
      z-index: 1000;
      border-radius: 10px;
    }

    .container {
      margin-left: 20%;
    }

    .updateManufacturer {
      background-color: rgba(50, 141, 168) !important;
      color: white !important;
      border: none !important;
      border-radius: 3px !important;
      width: 80px !important;
      height: 30px;
    }

    .closeForm {
      background-color: rgba(50, 141, 168) !important;
      color: white !important;
      border: none !important;
      border-radius: 3px !important;
      width: 80px !important;
      height: 30px;
    }

    button {
      margin: 1px;
    }

    #message {
      display: none;
      position: fixed;
      top: 50%;
      left: 50%;
      transform: translate(-50%, -50%);
      background-color: #ffffff; /* White background for the form */
      color: black;
      padding: 20px;
      z-index: 1000; /* Ensure it's above other elements */
      size: 200px;
      font-weight: 700;
      justify-content: space-between;
      align-content: space-between;
      align-items: center;
      font-size: 14px;
      box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.3) !important; /* Add a subtle box shadow */
      border-radius: 8px; /* Optional: Add border-radius for rounded corners */
      overflow: hidden;
    }

    form input {
      margin: 2px;
    }

    form button {
      width: 100px !important;
      padding: 5px;
      margin: 5px;
    }

    .col input {
      width: 100%;
    }

    input[type=checkbox] {
      width: 100px;
      color: #8f8f8f !important;
    }

    #ledgerob {
      min-width: 150px;
    }
  </style>
</head>
<body class="g-sidenav-show bg-gray-100">
  {{> sidebar}}
  <main class="main-content position-relative border-radius-lg">
    {{> navbar}}

    <div class="table-responsive container-fluid py-4">
      <div class="form-control card">
        <h3>Ledger Opening Balance</h3>
        <div class="row">
          <div class="col">
            <!-- Inside your form -->
            <label class="h6" for="ledgerob">Ledger Type:</label>
            <select id="ledgerob" name="ledgerob" class="dropdown"></select>
           <i class="fa-solid fa-magnifying-glass-arrow-right fa-xl  use " id="show"></i>
          </div>
        </div>
        <form action="/auth/ledgerData" method="get">
          <table id="customerTable" class="table-responsive justify-content-between align-items-end" style="width:100% !important">
            <thead>
              <tr>
                <th>Ledger Id</th>
                <th>Ledger Code</th>
                <th>Ledger Name</th>
                <th>Opening Date</th>
                <th>Dr Amount</th>
                <th>Cr Amount</th>
                {{!-- <th class="action">Action</th> --}}
              </tr>
            </thead>
            <tbody>
              <!-- Table body content goes here -->
            </tbody>
          </table>
        </form>
      </div>
    </div>
    {{> footer}}
  </main>
  {{> color}}
<script>
// DataTable initialization
var table = $("#customerTable").DataTable({
    dom: 'Bfrtip',
    buttons: ['copy', 'excel', 'pdf', 'csv'],
    paging: false,
    scrollY: '350px',
    scrollX: '100px',
    scrollCollapse: true,
    responsive: true,
    "bInfo": true,
    "bBorders": true,
    columns: [
        { data: 'id' },
        { data: 'code' },
        { data: 'ledgername' },
        {
            data: 'openingdate',
            render: function (data) {
                const formattedDate = moment(data).format("DD-MM-YYYY");
                return formattedDate;
            }
        },
        { data: 'dramount' },
        { data: 'cramount' },
   
    ],
});

// Function to fetch and display table data
function fetchAndDisplayTableData(ledgerTypeDesc) {
    console.log('Fetching data for ledger type:', ledgerTypeDesc);

    $.ajax({
        url: `/auth/ledgerData?ledgerTypeDesc=${ledgerTypeDesc}`,
        method: 'GET',
        success: function (response) {
            console.log('Received response for ledger data:', response);
            
            // Clear existing rows and add new data
            table.clear().rows.add(response.data).draw();
        },
        error: function (xhr, status, error) {
            console.error('Error fetching ledger data:', error);
        }
    });
}

// Fetch ledger options and populate the dropdown
$.ajax({
    url: '/auth/ledgerob',
    method: 'GET',
    success: function (response) {
        console.log('Received response for Ledgerob:', response);
        var options = response.data;
        if (options && options.length) {
            // Clear existing options
            $('#ledgerob').empty();

            options.forEach(function (option) {
                $('#ledgerob').append($('<option>', {
                    value: option.ledger_Type_Desc,
                    text: option.ledger_Type_Desc
                }));
            });
        } else {
          
            console.error('No options found for ledgerob');
        }
    },
    error: function (xhr, status, error) {
        console.error('Error fetching options for ledgerob:', error);
    }
});

{{!-- // Update the change event for the dropdown
$(document).on('change', '#ledgerob', function () {
    var selectedLedgerType = $(this).val();

    // Fetch and display table data for the selected ledger type
    fetchAndDisplayTableData(selectedLedgerType);
}); --}}


// Update the click event for the "show" button
$(document).on('click', '#show', function () {
  var selectedLedgerType = $('#ledgerob').val();

  if (selectedLedgerType) {
    // Initialize DataTable if not already initialized
    if (!table) {
      initializeDataTable();
    }

    // Fetch and display table data for the selected ledger type
    fetchAndDisplayTableData(selectedLedgerType);
  } else {
    alert('Please select a ledger type before clicking "Show".');
  }
});
</script>

</body>
</html>
