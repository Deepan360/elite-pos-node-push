<!DOCTYPE html>
<html lang="en">
<head>
    {{>header}}
  <style>
    #purchaseFormContainer {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #8f8f8f;
        padding: 20px;
        z-index: 1001;
        border-radius: 10px;
    }
    .new-row {
        display: none;
    }
    #manufacturerform {
        display: block;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #8f8f8f;
        padding: 20px;
        z-index: 1000;
        border-radius: 10px;
    }
    .editForm {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #8f8f8f;
        padding: 20px;
        z-index: 1000;
        border-radius: 10px;
    }
    .container {
        margin-left: 20%;
    }
    .updateManufacturer, .closeForm {
        background-color: rgba(50, 141, 168) !important;
        color: white !important;
        border: none !important;
        border-radius: 3px !important;
        width: 80px !important;
        height: 30px;
    }
    button {
        margin: 1px;
    }
    #message {
        display: none;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #ffffff;
        color: black;
        padding: 20px;
        z-index: 1000;
        size: 200px;
        font-weight: 700;
        justify-content: space-between;
        align-content: space-between;
        align-items: center;
        font-size: 14px;
        box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.3) !important;
        border-radius: 8px;
        overflow: hidden;
    }
    form input,
    select {
        margin: 2px;
    }
    form button {
        width: 100px !important;
        padding: 5px;
        margin: 5px;
    }
    .col input {
        width: 100%;
    }
    input[type=checkbox] {
        width: 100px;
        color: #8f8f8f !important;
    }
    table thead th {
        text-align: center;
    }
    .align-right-top {
        position: absolute;
        top: 0;
        right: 0;
        margin: 10px;
    }
    #dr,
    #cr {
        min-width: 150px;
    }
    .custom-form input[type="date"] {
        width: 100% !important;
    }
    .custom-form {
        display: flex;
        flex-direction: row;
        gap: 5px;
        align-items: center;
    }
    .custom-form button {
        align-items: end !important;
    }
    label>select {
        margin: 2px !important;
    }

</style>

</head>
<body class="g-sidenav-show bg-gray-100">
{{>sidebar}}
    <main class="main-content position-relative border-radius-lg">
        {{>navbar}}

        <div class="table-responsive container-fluid py-4">
            <div class="form-control card">

                            <div style="display: flex;justify-content: space-between;">
                <h3>Multi Receipt</h3>
<div class="div" style="align-items: end;">
    <button type="button" class="btn btn-success" id="new">New</button>
    <button class="btn btn-info editmasbtn">Edit</button>
    <button type="button" class="btn btn-danger deletemasBtn">Delete</button>
</div>
            </div>
<form id="purchaseDetails" class="custom-form" method="post">
<div class="form-group">
  <label for="id">Select receipt:</label>
  <select class="form-control" id="id" name="id">
    <option value="view details">View Details</option>
  </select>
</div>
    <div class="form-group">
        <label for="receipt_date">Receipt Date:</label>
        <input type="date" class="form-control" id="receipt_date" name="receipt_date">
    </div>
<div class="form-group">
    <label for="cash_bank_ledger">Cash/Bank Ledger(Dr):</label>
    <select class="form-control" id="cash_bank_ledger" name="cash_bank_ledger">
        <option value="" selected disabled>Select Cash/Bank Ledger(Dr)</option>
        <!-- Options will be populated dynamically -->
    </select>
</div>
<div class="form-group">
    <label for="customer_ledger">Customer Ledger(cr):</label>
    <select class="form-control" id="customer_ledger" name="customer_ledger">
        <option value="" selected disabled>Select Customer Ledger(cr)</option>
        <!-- Options will be populated dynamically -->
    </select>
</div> 

    <div class="form-group">
        <label for="amount">Amount:</label>
        <input type="text" class="form-control" id="amount" name="amount">
    </div>
</form>
                <div class="custom-input-container">
                    <a class="opener" id="openPurchaseForm"><i class="fa-solid fa-folder-plus fa-2x"></i></a>
                </div>

                <table id="customerTable" class="table-responsive justify-content-between align-items-end" style="width:100% !important">
                     <thead>
                        <tr>
                            <th>Bill No</th>
                            <th>Bill Date</th>
                            <th>Bill Amount</th>
                            <th>Recd Amount</th>
                            <th>Disc. Amount</th>
                            <th>Balance</th>
                            <th class="action">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                        <!-- Table body rows will be dynamically added here -->
                    </tbody>
                </table>
                
                <div class="row">
                    <div class="col d-flex justify-content-end ms-auto">
                        <button type="button" class="btn btn-info updateBtn opener" style="display: none;">Update</button>

                        <button type="button" id="submitFormBtn" class="btn btn-primary custom-btn add">Submit</button>
                    </div>
                </div>
            </div>
            <div id="selectedRowDetails"></div>
           
        </div>
        {{>footer}}
    </main>
     
{{>color}}

<script>
// Function to populate the dropdown
function populateDropdown(data, dropdownId) {
    const dropdown = $(`#${dropdownId}`);
    dropdown.empty(); // Clear existing options
    
    // Add the dummy option
    dropdown.append($('<option disabled selected></option>').attr('value', '').text('Select an option'));

    // Populate the dropdown with actual options
    data.forEach(option => {
        dropdown.append($('<option></option>').attr('value', option.ledgername).text(option.ledgername));
    });
}

    // AJAX request to get Cash/Bank Ledger(Dr) options
    $.ajax({
        type: 'GET',
        url: '/auth/multireceipt/dr',
        success: function(response) {
            populateDropdown(response.data, 'customer_ledger');
        },
        error: function(xhr, status, error) {
            console.error('Error fetching Cash/Bank Ledger(Dr) options:', error);
            // Handle error
        }
    });

$.ajax({
    url: '/auth/multipayment/cr',
    method: 'GET',
    success: function (response) {
        console.log('Received response for Ledger(dr):', response);
        var options = response.data;
        var $dropdown = $('#cash_bank_ledger'); // Select the dropdown by its ID
      
        // Check if "Cash In" is present in the options
        var cashInPresent = options.some(function(option) {
            return option.ledgername === "Cash";
        });

        // If "Cash In" is not present, add it to the options
        if (!cashInPresent) {
            options.push({ ledgername: "Cash" });
        }

        // Populate the dropdown with options
        if (options && options.length) {
            options.forEach(function (option) {
                // Create an option element and append it to the dropdown
                $dropdown.append($('<option>', {
                    value: option.ledgername,
                    text: option.ledgername
                }));
            });
        } else {
            console.error('No options found for Ledger(dr)');
        }
    },
    error: function (xhr, status, error) {
        console.error('Error fetching options for Ledger(dr):', error);
    }
});

$(document).on('click', '.editmasbtn', function() {
    $('.opener').show();
    $('.updateBtn').show();
    $('#customerTable tbody tr').each(function() {
        var row = $(this);
        var billNo = row.find('td:eq(0)').text();
        var billDate = row.find('td:eq(1)').text();
        var billAmount = row.find('td:eq(2)').text();
        var recdAmount = row.find('td:eq(3)').text();
        var discAmount = row.find('td:eq(4)').text();
        var balance = row.find('td:eq(5)').text();
        
         var trans_Id = row.find('i.deletetransBtn').data('transid');
        
        row.html("<td><input type='text' name='billno' class='input-field' value='" + billNo + "'></td>" +
            "<td><input type='date' name='billdate' class='input-field' value='" + billDate + "'></td>" +
            "<td><input type='number' name='billamount' class='input-field' value='" + billAmount + "'></td>" +
            "<td><input type='number' name='recdamount' class='input-field' value='" + recdAmount + "'></td>" +
            "<td><input type='number' name='discamount' class='input-field' value='" + discAmount + "'></td>" +
            "<td><input type='number' name='balance' class='input-field' value='" + balance + "'></td>" +
            "<td><i class='fa-solid fa-trash deletetransBtn' type='button' data-transid='" + trans_Id + "'></i></td>");
    });
});


$(document).on('click', '.updateBtn', function(event) {
    event.preventDefault();

var purchaseId = $('#id').val();
if (!purchaseId) {
    console.error('No purchase ID selected.');
    alert('No purchase ID selected. Please select a purchase ID to update.');
    return;
}


    var masterData = {
        receipt_date: $('#receipt_date').val(),
        cash_bank_ledger: $('#cash_bank_ledger').val(),
        customer_ledger: $('#customer_ledger').val(),
        amount: $('#amount').val()
    };

    var transactionData = getUpdatedTransactionData();

    var payload = {
        purchaseId: purchaseId,
        masterData: masterData,
        transactionData: transactionData
    };

    console.log('Payload:', payload);

    $.ajax({
        type: 'PUT',
        url: '/auth/multireceiptedit/' + purchaseId,
        contentType: 'application/json',
        data: JSON.stringify(payload),
        success: function(response) {
            console.log(response);
            if (response.success) {
                alert('Successfully updated');
                window.location.href = "/multireceipt";
            } else {
                alert("Failed to update purchase: " + response.message);
            }
        },
        error: function(xhr, status, error) {
            console.error('Error updating purchase:', error);
            alert("Failed to update purchase. Check console for details.");
        }
    });
});

function getUpdatedTransactionData() {
    var transactionData = [];

    $('#customerTable tbody tr').each(function() {
        var row = $(this);
        var billNo = row.find('input[name="billno"]').val();
        var billDate = row.find('input[name="billdate"]').val();
        var billAmount = row.find('input[name="billamount"]').val();
        var recdAmount = row.find('input[name="recdamount"]').val();
        var discAmount = row.find('input[name="discamount"]').val();
        var balance = row.find('input[name="balance"]').val();

        var data = {
            billno: billNo,
            billdate: billDate,
            billamount: billAmount,
            recdamount: recdAmount,
            discamount: discAmount,
            balance: balance
        };

        transactionData.push(data);
    });

    return transactionData;
}


const baseUrl = window.location.origin;

$(document).on('click', '.deletetransBtn', function() {
    var row = $(this).closest('tr');
    var transId = $(this).data('transid'); // Corrected data attribute name

    if (!confirm('Are you sure you want to delete this row?')) {
        return;
    }

    $.ajax({
        type: 'DELETE',
        url: `${baseUrl}/auth/multireceipttransdelete/${transId}`,
        success: function(response) {
            if (response.success) {
                row.remove();
                alert('Row deleted successfully');
            } else {
                alert('Failed to delete row: ' + response.error);
            }
        },
        error: function(xhr, status, error) {
            console.error('Error deleting row:', error);
            alert('An error occurred while deleting the row.');
        }
    });
});





document.addEventListener('DOMContentLoaded', () => {
  const dropdown = document.getElementById('id');

  // Make AJAX request to fetch dropdown options
  fetch('/auth/multireceipt') // Assuming this endpoint is available at '/auth/multireceipt'
    .then(response => response.json())
    .then(data => {
      // Check if data.options exists and it's an array
      if (data && Array.isArray(data.options)) {
        data.options.forEach(option => {
          const optionElement = document.createElement('option');
          optionElement.value = option.value;
          optionElement.textContent = option.label;
          dropdown.appendChild(optionElement);
        });
      } else {
        console.error('Data is not in the expected format:', data);
      }
    })
    .catch(error => console.error('Error fetching data:', error));

dropdown.addEventListener('change', (event) => {
    const selectedId = event.target.value;
    fetch(`/auth/multireceiptselect/${selectedId}`)
        .then(response => response.json())
        .then(data => {
            // Update form fields with selected receipt details
            const { masterData, transData } = data;
            const master = masterData[0]; // Assuming only one master data row is returned
            document.getElementById('receipt_date').value = formatDate(master.reciptdate);
            document.getElementById('cash_bank_ledger').value = master['cash/bankLedger(dr)'];
            document.getElementById('customer_ledger').value = master['customerLedger(cr)'];
            document.getElementById('amount').value = master.amount;

            // Update table with transaction details
            const table = $('#customerTable').DataTable();
            table.clear().draw(); // Clear existing rows
            transData.forEach(transaction => {
                table.row.add([
                    transaction.billno,
                    formatDate(transaction.billdate),
                    transaction.billamount,
                    transaction.recdamount,
                    transaction.discamount,
                    transaction.balance,
                    `<i class="fa-solid fa-trash deletetransBtn" type="button"  data-transid="${transaction.trans_Id}"></i>`
                ]).draw();
            });
        })
        .catch(error => console.error('Error fetching selected receipt details:', error));
});



  
  // Function to format date as dd-mm-yyyy
function formatDate(dateString) {
  const date = new Date(dateString);
  const day = date.getDate().toString().padStart(2, '0');
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const year = date.getFullYear();
  return `${year}-${month}-${day}`;
}

});

$(document).ready(function () {
  $('#customerTable').DataTable({
    searching: false,
    paging: false,
    scrollY: '400px',
    scrollX: true,
    scrollCollapse: false,
    responsive: true,
    bInfo: true,
    bBorders: true,
    fixedColumns: {
      leftColumns: 0
    }
  });

  let products = [];

  $(document).on('click', '#openPurchaseForm', function () {
    console.log("Button clicked!");
    let uniqueId = generateUniqueId();
    let newRow = $("<tr>" +
      "<td><input type='text' name='billno' class='input-field' id='billno_" + uniqueId + "' placeholder='Bill No'></td>" +
      "<td><input type='date' name='billdate' class='input-field' id='billdate_" + uniqueId + "'></td>" +
      "<td><input type='number' name='billamount' class='input-field' id='billamount_" + uniqueId + "' placeholder='Bill Amount'></td>" +
      "<td><input type='number' name='recdamount' class='input-field' id='recdamount_" + uniqueId + "' placeholder='Recd Amount'></td>" +
      "<td><input type='number' name='discamount' class='input-field' id='discamount_" + uniqueId + "' placeholder='Disc. Amount'></td>" +
      "<td><input type='number' name='balance' class='input-field' id='balance_" + uniqueId + "' placeholder='Balance'></td>" +
      "<td class='action new-row'><button class='btn btn-danger deleteRowBtn'>Delete Row</button></td>" +
      "</tr>");

    $('#customerTable tbody').append(newRow);
  });

  $('#customerTable tbody').on('click', 'button.deleteRowBtn', function () {
    let row = $(this).closest("tr");
    if (row) {
      row.remove();
    }
  });

  $('#submitFormBtn').on('click', function () {
    let formData = {
      // Retrieve values from the form fields
      receipt_date: $('#receipt_date').val(),
      cash_bank_ledger: $('#cash_bank_ledger').val(),
      customer_ledger: $('#customer_ledger').val(),
      amount: $('#amount').val(),
      receipts: getProductsData() // Get products data directly
    };

    console.log('Data being sent to the server:', formData);

    // Send AJAX request to the server
    $.ajax({
      url: '/auth/multireceipt',
      method: 'POST',
      contentType: 'application/json', // Specify content type as JSON
      data: JSON.stringify(formData), // Convert form data to JSON string
      success: function (response) {
        console.log(response);
        location.reload();
        alert('Successfully Submitted purchase');
      },
      error: function (error) {
        console.error("Error submitting form:", error);
      }
    });
  });

  function getProductsData() {
    var products = [];

    // Iterate through each row of the table
    $('#customerTable tbody tr').each(function () {
      var uniqueId = $(this).find('input[name="billno"]').attr('id');
      if (uniqueId) {
        uniqueId = uniqueId.split('_')[1];

        var product = {
          billno: $('#billno_' + uniqueId).val() || "",
          billdate: $('#billdate_' + uniqueId).val() || "", // Correctly fetch the value of billdate
          billamount: $('#billamount_' + uniqueId).val() || "", // Correctly fetch the value of billamount
          recdamount: $('#recdamount_' + uniqueId).val() || "",
          discamount: $('#discamount_' + uniqueId).val() || "",
          balance: $('#balance_' + uniqueId).val() || ""
        };
        console.log('Product Details:', product);
        products.push(product);
      } else {
        console.error('UniqueId attribute not found for this row:', this);
      }
    });

    return { receipts: products }; // Wrap products in an object with key 'receipts'
  }

  function generateUniqueId() {
    return uuidv4();
  }
});

$(document).ready(function() {
    // Function to handle delete button click
    $(document).on('click', '.deletemasBtn', function() {
        // Get the selected ID directly from the dropdown value
        const selectedId = $('#id').val();
        
        // Check if a valid ID is selected
        if (!selectedId) {
            console.error('No purchase ID found');
            return;
        }
        
        // Construct the delete URL
        var deleteUrl = '/auth/multireceiptdelete/' + selectedId; 
        
        // Send DELETE request
        $.ajax({
            type: 'DELETE',
            url: deleteUrl,
            success: function(response) {
                console.log(response);
                if (response.success) {
                    alert('Successfully Deleted 🗑');
                    // Reload the page after successful deletion
                    location.reload();
                } else {
                    alert("Failed to delete purchase: " + response.error);
                }
            },
            error: function(error) {
                console.error('Error deleting purchase:', error);
                alert("Failed to delete purchase. Check console for details.");
            }
        });
    }); 
});



$(document).ready(function () {
    $('.div').hide();
    $('.add').show();
    
    // Select the dropdown using jQuery
    const dropdown = $('#id');
    
    dropdown.on('change', function(event) {
        var selectedOption = $(this).find('option:selected');
        if (selectedOption.val() && selectedOption.val() !== 'view details') {
            $('.div').show();
            $('.opener').hide();
            $('.add').hide();
        } else {
            $('.div').hide();
            $('.add').show();
        }
    });
});



$(document).ready(function() {
    $('#new').click(function() {
       window.location.href = '/multireceipt'
    });
});
</script>

</body>      
</html>
