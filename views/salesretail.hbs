<!DOCTYPE html>
<html lang="en">

<head>
    {{>header}}
    <style>
        .new-row {
            display: none;
        }

        .input-field.product-name {
            width: 200px;
            /* Adjust the width as needed */
            padding: 5px;
            ;
        }

        .non-selectable {
            cursor: not-allowed;
            /* Show not-allowed cursor for non-selectable rows */
            opacity: 0.5;
            /* Make non-selectable rows appear faded */
        }

        .input-field.disc-mode {
            width: 200px;
            /* Adjust the width as needed */
            padding: 5px;
            ;
        }

        .editForm {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #8f8f8f;
            padding: 20px;
            z-index: 1001;
            /* Ensure the popup is above the blurred background */
            border-radius: 10px;
        }

        .container {
            margin-left: 20%;
        }

        .updateManufacturer {
            background-color: rgba(50, 141, 168) !important;
            color: white !important;
            border: none !important;
            border-radius: 3px !important;
            width: 80px !important;
            height: 30px;
        }

            {
                {
                !-- .closeForm {
                    background-color: rgba(50, 141, 168) !important;
                    color: white !important;
                    border: none !important;
                    border-radius: 3px !important;
                    width: 80px !important;
                    height: 30px;
                }

                --
            }
        }

        button {
            margin: 1px;
        }

        #message {
            display: none;
            position: fixed;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            background-color: #ffffff;
            color: black;
            padding: 20px;
            z-index: 1000;
            size: 200px;
            font-weight: 700;
            justify-content: space-between;
            align-content: space-between;
            align-items: center;
            font-size: 14px;
            box-shadow: 0px 0px 12px rgba(0, 0, 0, 0.3) !important;
            border-radius: 8px;
            overflow: hidden;
        }

        form input {
            margin: 2px;
        }

        form button {
            width: 100px !important;
            padding: 5px;
            margin: 5px;
        }

        .col input {
            width: 100%;
        }

        input[type=checkbox] {
            width: 100px;
            color: #8f8f8f !important;
        }

        #submitButton {
            display: none;
        }

        .align-right-top {
            position: absolute;
            top: 0;
            right: 0;
            margin: 10px;
        }

        .btn.disabled,
        .btn[disabled] {
            background-color: #4e4e4e !important;
            border-color: #afafaf !important;
            cursor: not-allowed !important;
            opacity: 0.6;
            color: #000;
            pointer-events: none !important;
        }

        /* Ensure the Select2 dropdown has the correct width */
        .select2-container--default .select2-selection--single {
            height: 38px;
            /* Adjust this height to match your design */
            border: 1px solid #ced4da;
            /* Match your input styles */
            border-radius: 4px;
            /* Match your input styles */
        }

        /* Adjust the width of the dropdown */
        .select2-container {
            width: 100% !important;
            /* Make sure it takes full width */
        }

        /* Optional: Customize the dropdown's search input */
        .select2-container--default .select2-search--dropdown .select2-search__field {
            height: 38px;
            /* Match the height */
        }

        /* Optional: Style the placeholder */
        .select2-container--default .select2-selection--single .select2-selection__placeholder {
            color: #6c757d;
            /* Placeholder color */
        }

        tr td input.input-field,
        tr td select.input-field {
            width: 100%;
            /* Make the input/select take full width of the td */
            max-width: max-content;
            /* Allow the input to stretch based on its content */
            box-sizing: border-box;
            white-space: nowrap;
            margin: 0;
            /* Remove any default margin */
            /* Center text in the inputs */
        }

        /* Table header (thead) styling to ensure alignment with tbody */
        table th {
            width: auto;
            /* Make the input/select take full width of the td */
            white-space: nowrap;
            box-sizing: border-box;
        }

        /* Responsive table container */
        .table-responsive {
            white-space: nowrap;
            /* Ensure the table does not break in smaller screens */
        }
    </style>
</head>

<body class="g-sidenav-show bg-gray-100">
    {{>sidebar}}
    <main class="main-content position-relative border-radius-lg">
        {{>navbar}}
        <div class="table-responsive container-fluid py-4">
            <div class="form-control card">
                <div style="display: flex;justify-content: space-between;">
                    <div class="d-flex w-auto align-center align-center gap-2">
                        <h3>Retailer sale </h3>
                        <div class=" opener mt-2  bg-success mb-2 px-1 rounded-3 align-center text-white py-1 cursor-pointer newcoustomer"
                            type="button" id="newCustomerBtn">

                            <svg xmlns="http://www.w3.org/2000/svg" width="26" height="26" fill="currentColor"
                                class="bi bi-person-plus-fill" viewBox="0 0 16 16">
                                <path d="M1 14s-1 0-1-1 1-4 6-4 6 3 6 4-1 1-1 1zm5-6a3 3 0 1 0 0-6 3 3 0 0 0 0 6" />
                                <path fill-rule="evenodd"
                                    d="M13.5 5a.5.5 0 0 1 .5.5V7h1.5a.5.5 0 0 1 0 1H14v1.5a.5.5 0 0 1-1 0V8h-1.5a.5.5 0 0 1 0-1H13V5.5a.5.5 0 0 1 .5-.5" />
                            </svg>
                            <label class="text-white">New Customer</label>
                        </div>
                    </div>
                    <div class="div" style="align-items: end;">
                        <button type="button" class="btn btn-success" id="new">New</button>
                        <button class="btn btn-info editmasbtn">Edit</button>
                        <button type="button" class="btn btn-danger deletemasBtn">Delete</button>
                    </div>
                </div>

                <form id="purchaseDetails" class="form-control" style="display: block; align-item: start;"
                    method="post">
                    <div class="row mt-2">
                        <div class="col-md-2 d-none">
                            <div class="custom-input-container">
                                <select name="Id" class="dropdown" id="Id">
                                    <option selected>view details</option>
                                </select>
                                <label for="purchaseId">Sale Id</label>
                                <input type="hidden" name="id" id="id">
                            </div>
                        </div>
                        <div class="col-md-2 custom opener">
                            <div class="custom-input-container">


                                <select name="customerSelect" id="customerSelect" required>
                                    <option value="" disabled selected>Select a customer</option>
                                    <!-- Options will be dynamically populated -->
                                </select>
                                <label for="customerSelect">Select a customer<span class="text-danger text-2x"
                                        style="font-size: medium !important;">*</span></label>
                            </div>
                        </div>

                        <div class="col-md-2">
                            <div class="custom-input-container">
                                <input type="text" placeholder=" " name="mobileno" id="mobileno" readonly>
                                <label for="mobileno">Customer Mobile No</label>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="custom-input-container">
                                <input type="text" placeholder=" " name="customername" id="customername" readonly>
                                <label for="customername">Customer Name</label>
                            </div>
                        </div>
                        {{!-- <div class="col-md-2 custom">
                            <div class=" custom-input-container  ">
                                <label for="paymentmode">Payment Mode<span class="text-danger text-2x "
                                        style="font-size: medium !important;">*</span></label>
                                <select name="paymentmode" id="paymentmode">
                                    <option value="" disabled selected hidden>Choose Payment Mode</option>
                                    <option value="cash">Cash</option>
                                    <option value="credit">Credit</option>
                                    <option value="cash-credit">Cash/Credit</option>
                                </select>

                            </div>
                        </div> --}}
                        <div class="col-md-2">
                            <div class="custom-input-container">
                                <input type="date" placeholder=" " name="saledate" id="saledate">
                                <label for="saledate">Sale Date</label>
                            </div>
                        </div>
                        <div class="col-md-2">
                            <div class="custom-input-container">
                                <input type="text" placeholder=" " name="doctorname" id="doctorname">
                                <label for="doctorname">Doctor Name</label>
                            </div>
                        </div>

                        <input type="hidden" id="customerId" name="customerId" value="">

                    </div>

                    <div style="display: none;">
                        <input type="hidden" id="pamount_" name="pamount" value="0.00">
                        <input type="hidden" id="pigst_" name="pigst" value="0.00">
                        <input type="hidden" id="pcgst_" name="pcgst" value="0.00">
                        <input type="hidden" id="psgst_" name="psgst" value="0.00">
                        <input type="hidden" id="psubtotal_" name="psubtotal" value="0.00">
                        <input type="hidden" id="pcess_" name="pcess" value="0.00">
                        <input type="hidden" id="ptcs_" name="ptcs" value="0.00">
                        <input type="hidden" id="proundOff_" name="proundOff" value="0.00">
                        <input type="hidden" id="pnetAmount_" name="pnetAmount" value="0.00">
                        <input type="hidden" id="pdiscount_" name="pdiscount" value="0.00">
                        <input type="hidden" id="pdiscMode_" name="pdiscMode_" value="">
                        <input type="hidden" id="ppaymentMode" name="ppaymentMode" value="">

                    </div>
                </form>

                <div class="custom-input-container">
                    <a class="opener" id="openPurchaseForm"><i class="fa-solid fa-folder-plus fa-2x"></i></a>
                </div>
                <table id="customerTable" class="table-responsive justify-content-between align-items-end"
                    style="width:100% !important">
                    <thead>
                        <tr>
                            <th>Id</th>
                            <th>Product Name</th>
                            <th>Batch No</th>
                            <th>Tax(%)</th>
                            <th>Quantity</th>
                            <th class="d-none">Free</th>
                            <th class="d-none">UOM</th>
                            <th>Purc.Rate</th>
                            <th class="d-none">MRP</th>
                            <th>MRP</th>
                            <th>Disc.Mode</th>
                            <th>Disc</th>
                            <th>Amount</th>
                            <th class="d-none">CGST</th>
                            <th class="d-none">SGST</th>
                            <th class="d-none">IGST</th>
                            <th class="d-none">Total Amount</th>
                            <th class="action">Action</th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
                <div class="row">
                    <form action="/auth/purchase" method="post" id="purchaseDetails" style="display: contents;">
                        <div class="col-2 custom">
                            <div class="custom-input-container">
                                <select id="pdiscMode" class="dropdown" name="pdiscMode">
                                    <option selected="disabled">Select Discount Mode</option>
                                </select>
                                <label for="discMode">discMode<span class="text-danger text-2x "
                                        style="font-size: medium !important;">*</span></label>
                            </div>
                        </div>
                        <div class="col-2 custom">
                            <div class="custom-input-container">
                                <input type="text" placeholder=" " name="pdiscount" id="pdiscount" disabled>
                                <label for="pdiscount">discount<span class="text-danger text-2x "
                                        style="font-size: medium !important;">*</span></label>
                            </div>
                        </div>
                        <div class="col-md-2 custom">
                            <div class=" custom-input-container  ">
                                <label for="paymentmode">Payment Mode<span class="text-danger text-2x "
                                        style="font-size: medium !important;">*</span></label>
                                <select name="paymentmode" id="paymentmode" required>
                                    <option value="" disabled selected hidden>Choose Payment Mode</option>
                                    <option value="cash">Cash</option>
                                    <option value="COD">Cash On Delivery</option>
                                    <option value="CODP">Cash On Delivery(PAID)</option>
                                    <option value="gpay">Google Pay</option>
                                </select>

                            </div>
                        </div>
                    </form>
                    <div class="col d-flex justify-content-end ms-auto">
                        <div class="div">
                            <button type="submit" class="btn updateBtn disabled disabled" id="not">Update</button>
                            <button type="button" class="btn draftBtn disabled" id="draftBtn">Draft</button>
                            <input type="hidden" name="is_Draft" id="is_Draft">
                        </div>
                        <button type="button" id="submitFormBtn" class="btn btn-primary custom-btn add"
                            disabled>Submit</button>
                        <input type="button" id="draftButton" value="Draft" class="btn btn-primary custom-btn add">
                        <input type="hidden" name="is_Draft" id="is_Draft" value="0">
                    </div>
                </div>

                <form id="purchaseDetails" class="form-control p-0" style="display: block; align-item: start;"
                    action="auth/salesretail" method="post">
                    <div class="row d-flex justify-content-between  mb-0 gx-0 w-100 ">
                        <div class="labels">

                            <div class="custom col-md-1">
                                <label for="pamount">Amount:</label>
                                <span id="pamount" name="pamount">0.00</span>
                            </div>

                            <div class="custom col-md-1">
                                <label for="pigst">IGST:</label>
                                <span id="pigst" name="pigts">0.00</span>
                            </div>

                            <div class="custom col-md-1">
                                <label for="pcgst">CGST:</label>
                                <span id="pcgst" name="pcgst">0.00</span>
                            </div>

                            <div class="custom col-md-1">
                                <label for="psgst">SGST:</label>
                                <span id="psgst" name="psgst">0.00</span>
                            </div>

                            <div class="custom col-md-1">
                                <label for="psubtotal">Total Net Amount:</label>
                                <span id="psubtotal" name="psubtotal">0.00</span>
                            </div>

                            {{!-- <div class="custom">
                                <label for="pcess">CESS:</label>
                                <span id="pcess" name="pcess">0.00</span>
                            </div> --}}



                            {{!-- <div class="custom">
                                <label for="ptcs">TCS:</label>
                                <span id="ptcs" name="ptcs">0.00</span>
                            </div> --}}
                            {{!-- <div class="custom">
                                <label for="proundOff">Round Off:</label>
                                <span id="proundOff" name="proundOff">0.00</span>
                            </div> --}}

                            {{!-- <div class="col">
                                <div class="custom">
                                    <label for="pnetAmount">Net Amount:</label>
                                    <span id="pnetAmount" name="pnetAmount">0.00</span>
                                </div>
                            </div> --}}
                        </div>
                    </div>
                    <div id="overlay"
                        style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 1000; overflow: auto;">
                        <div id="batchform"
                            style="display: none; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #ffffff; padding: 20px; border: 1px solid #ccc; width: 80%; max-width: 800px;">
                            <a class="closebatch" style="position: absolute; top: 0px; right: -2px;"><i
                                    class="fa-solid fa-circle-xmark fa-2x"></i></a>

                            <!-- Scrollable table container with fixed header -->
                            <div style="max-height: 200px; overflow-y: auto; position: relative;">
                                <table id="batchDetailsTable" class="table"
                                    style="width: 100%; table-layout: fixed; border-collapse: collapse;">
                                    <thead class="bg-primary"
                                        style="position: sticky; top: 0; z-index: 1; background-color: #007bff; color: white;">
                                        <tr>
                                            <th>Batch No</th>
                                            <th>Expiry Date</th>
                                            <th>Tax</th>
                                            <th>Quantity</th>
                                            <th>UOM</th>
                                            <th>Rate</th>
                                            <th>MRP</th>
                                        </tr>
                                    </thead>
                                    <tbody id="batchDetailsBody"></tbody>
                                </table>
                            </div>

                            <!-- Fixed Color Legend below the scrollable table -->
                            <div style="margin-top: 10px;">
                                <strong>Color Legend:</strong>
                                <ul style="list-style: none; padding-left: 0;">
                                    <li><span
                                            style="background-color: red; color: white; padding: 2px 5px;">&nbsp;&nbsp;&nbsp;</span>
                                        Already expired</li>
                                    <li><span
                                            style="background-color: orange; color: white; padding: 2px 5px;">&nbsp;&nbsp;&nbsp;</span>
                                        Expiring in Three Months</li>
                                </ul>
                            </div>
                        </div>
                    </div>

                </form>
            </div>
            <div id="selectedRowDetails"></div>

        </div>
        <div id="alertMessage" class="alert alert-danger text-white d-none alert-dismissible show" role="alert"
            style="padding: 10px; border: 1px solid; margin-bottom: 10px; position: fixed; top: 0; right: 10px; width: 25%;">
            <button type="button" class="close text-white" data-bs-dismiss="alert" aria-label="Close"
                style="background: none; border: none; font-size: 20px; line-height: 1;">X</button>
        </div>
        <div class="alert alert-danger alert-dismissible fade show" role="alert" id="quantityAlert"
            style="display: none;">
            <strong>Warning!</strong> Quantity cannot be greater than the purchase quantity.
            <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
        </div>


        <div id="newCustomerFormOverlay"
            style="display: none; position: fixed; top: 0; left: 0; width: 100%; height: 100%; background-color: rgba(0, 0, 0, 0.5); z-index: 1000;">
            <div id="newCustomerFormContainer"
                style="position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); background-color: #ffffff; padding: 20px; border: 1px solid #ccc; width: 80%; max-width: 600px; box-shadow: 0px 4px 10px rgba(0, 0, 0, 0.2); border-radius: 10px;">
                <h5 class="form-title" style="text-align: center; margin-bottom: 20px;">Add New Customer</h5>

                <form id="newCustomerForm" method="post" action="/salesretail/customerretail">
                    <div class="mb-3">
                        <label for="customer" class="form-label">Customer Name</label>
                        <input type="text" class="form-control" id="customer" required>
                    </div>
                    <div class="mb-3">
                        <label for="mobileno" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="cmobileno" required>
                    </div>
                    <div class="mb-3">
                        <label for="salesmannameSelect" class="form-label">Salesman</label>
                        <select id="salesmannameSelect" class="form-select" name="salesman" required>
                            <option value="" disabled selected>Select Salesman</option>
                            <!-- Options populated dynamically -->
                        </select>
                    </div>
                </form>
                <div class="modal-footer" style="display: flex; justify-content: space-between; margin-top: 20px;">
                    <button type="button" class="btn btn-secondary closeForm">Close</button>
                    <button type="button" class="btn btn-primary" id="saveCustomerBtn">Save Customer</button>
                </div>
            </div>
        </div>
        {{>footer}}
        </div>
        <div id="alertModal" class="modal fade" tabindex="-1" role="dialog">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title">Notification</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body">
                        <p id="modalMessage">Your message here</p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-primary" data-bs-dismiss="modal">OK</button>
                    </div>
                </div>
            </div>
        </div>
    </main>
    {{>color}}



    <script>
        $(document).ready(function () {
            // Initially hide the opener
            $('#openPurchaseForm').hide();
            function checkRequiredFields() {
                let isValid = true;
                // Iterate over all required fields and check their validity
                $('#purchaseDetails').find('input[required], select[required]').each(function () {
                    if ($(this).val() === '' || $(this).val() === null) {
                        isValid = false;
                    }
                });
                // Show the opener if all fields are valid, else hide it
                if (isValid) {
                    $('#openPurchaseForm').show();
                } else {
                    $('#openPurchaseForm').hide();
                }
            }
            // Bind input and change events to validate on the fly
            $('#purchaseDetails').find('input, select').on('input change', function () {
                checkRequiredFields();
            });
        });



        $(document).ready(function () {
            const $submitBtn = $('#submitFormBtn');
            const $paymentMode = $('#paymentmode'); // Select the select element directly
            function checkRequiredFields() {
                $submitBtn.prop('disabled', $paymentMode.is(':invalid')); // Simplified logic
            }
            $paymentMode.on('change input', checkRequiredFields); // Bind to the select element
            checkRequiredFields(); // Initial check
        });
    </script>



    <script>
        $(document).ready(function () {
            $('#paymentmode').change(function () {
                $('#ppaymentMode').val($(this).val());
            });
        });
        $(document).ready(function () {
            // Initialize Select2 for customerSelect
            $('#customerSelect').select2({
                placeholder: "Search by name or mobile number",
                allowClear: true
            });
            // Fetch customer data and populate dropdown
            $.ajax({
                url: '/auth/salesretail/customerretail',
                method: 'GET',
                success: function (response) {
                    const customers = response.data;
                    // Populate the customer select dropdown
                    customers.forEach(function (customer) {
                        $('#customerSelect').append($('<option>', {
                            value: customer.id, // Ensure this is just the ID
                            text: `${customer.customername} (${customer.mobileno})`
                        }));
                    });
                    // Trigger Select2 update after appending options
                    $('#customerSelect').trigger('change');
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching customer data:', error);
                    alert('Failed to load customer data.');
                }
            });

            $('#customerSelect').on('select2:select', function (e) {
                const selectedOption = $(this).find('option:selected');
                const customerId = selectedOption.val(); // This should only be the ID
                const customerName = selectedOption.text().split(" (")[0]; // Extracting name if needed
                const customerMobile = selectedOption.text().split(" (")[1].replace(')', ''); // Extracting mobile number
                console.log("Customer ID:", customerId);
                // Set selected customer details in input fields
                $('#customername').val(customerName); // This is for display purposes
                $('#mobileno').val(customerMobile); // This is for display purposes
                $('#customerId').val(customerId); // Ensure this is just the ID
            });

            $('#customerSelect').on('select2:unselect', function () {
                $('#customername').val(""); // Clear customer name input
                $('#mobileno').val(""); // Clear mobile number input
                $('#customerId').val(""); // Clear customer ID
            });
        });


        $(document).on('click', '#newCustomerBtn', function () {
            $('#newCustomerForm')[0].reset(); // Reset the form
            $('#newCustomerFormOverlay').show(); // Show the overlay and form
        });

        $('.closeForm').on('click', function () {
            $('#newCustomerFormOverlay').hide(); // Hide the overlay and form
        });

        // Fetch Salesman data and populate the dropdown
        $.ajax({
            url: '/auth/sales/salesmanname', // API for fetching salespeople
            method: 'GET',
            success: function (response) {
                console.log('Received response for salesman names:', response);
                var options = response.data;
                if (options && options.length) {
                    options.forEach(function (option) {
                        $('#salesmannameSelect').append($('<option>', {
                            value: option.id,
                            text: option.ledgername
                        }));
                    });
                } else {
                    console.error('No options found for salesman names.');
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching salesman names:', error);
            }
        });

        $('#saveCustomerBtn').on('click', function () {
            const customername = $('#customer').val().trim(); // Ensure no leading/trailing spaces
            const mobileno = $('#cmobileno').val().trim(); // Ensure no leading/trailing spaces
            const salesman = $('#salesmannameSelect').val();
            console.log($('#customername').length);
            // Log all values for debugging
            console.log('Customer Name:', customername);
            console.log('Mobile No:', mobileno);
            console.log('Salesman selected value:', salesman);
            if (!customername || !mobileno) {
                alert("Please fill in all fields.");
                return;
            }
            const customerData = {
                customername: customername,
                mobileno: mobileno,
                salesman: salesman
            };
            $.ajax({
                url: '/auth/salesretail/customerretail',
                method: 'POST',
                contentType: 'application/json',
                data: JSON.stringify(customerData),
                success: function (response) {
                    alert('Customer added successfully!');
                    $('#newCustomerFormOverlay').hide();
                    location.reload();
                },
                error: function (xhr, status, error) {
                    console.error("Error adding customer:", xhr, status, error);
                    if (xhr.status === 400) {
                        let errorMessage = JSON.parse(xhr.responseText).message;
                        alert('Failed to add customer: ' + errorMessage);
                    } else if (xhr.status === 500) {
                        alert('Failed to add customer. Please try again later.');
                    } else {
                        alert('Failed to add customer. Please try again.');
                    }
                }
            });
        });
        // Optionally, hide overlay when clicking outside the form
        $('#newCustomerFormOverlay').on('click', function (e) {
            if (e.target === this) {
                $('#newCustomerFormOverlay').hide(); // Hide the form when clicking outside
            }
        });
    </script>
    <script>
        $(document).ready(function () {
            // Disable the discount input initially
            $('#pdiscount').prop('disabled', true);
            // Listen to change event on the discount mode dropdown
            $('#pdiscMode').change(function () {
                var selectedValue = $(this).val();
                if (selectedValue) {
                    // Enable discount input if a discount mode is selected
                    $('#pdiscount').prop('disabled', false);
                } else {
                    // Disable discount input if no discount mode is selected
                    $('#pdiscount').prop('disabled', true);
                }
            });
        });
        $(document).ready(function () {
            // Attach click event listener to the closebatch link
            $('.closebatch').on('click', function () {
                // Hide the overlay and batchform
                $('#overlay').hide();
                $('#batchform').hide();
            });
        });
        $(document).ready(function () {
            $.ajax({
                url: '/auth/purchase/discmode',
                method: 'GET',
                dataType: 'json',
                success: function (response) {
                    console.log('Received response for discmode options:', response);
                    var options = response.data;
                    if (options && options.length) {
                        var discModeDropdown = $('#pdiscMode');
                        discModeDropdown.find('option').remove();
                        discModeDropdown.append($('<option>', {
                            selected: 'selected',
                            disabled: 'disabled',
                            text: 'Select Disc Mode'
                        }));
                        options.forEach(function (option) {
                            discModeDropdown.append($('<option>', {
                                value: option.id,
                                text: option.discMode  // Display the discMode name
                            }));
                        });
                        console.log('Dropdown values:', discModeDropdown.val());
                    } else {
                        console.error('No options found for discmode');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching discmode options:', error);
                }
            });
        });

        $(document).on('click', '.editmasbtn', function () {
            showBootstrapModal('IF YOU GONNA EDIT IN QUANTITY OF SALES PRODUCT,DELETE THE TRANSACTION AND ADD  CORRECT QUANTITY 🖋');
            $('.opener').show();
            $('#customerTable tbody tr').each(function () {
                var row = $(this);
                var id = row.find('td:eq(0)').text();
                var product = row.find('td:eq(1)').text();
                var batchNo = row.find('td:eq(2)').text();
                var tax = row.find('td:eq(3)').text();
                var quantity = row.find('td:eq(4)').text();
                var free = row.find('td:eq(5)').text();
                var uom = row.find('td:eq(6)').text();
                var purcRate = row.find('td:eq(7)').text();
                var mrp = row.find('td:eq(8)').text();
                var rate = row.find('td:eq(9)').text();
                var discMode = row.find('td:eq(10)').text();
                var discount = row.find('td:eq(11)').text();
                var amount = row.find('td:eq(12)').text();
                var cgst = row.find('td:eq(13)').text();
                var sgst = row.find('td:eq(14)').text();
                var igst = row.find('td:eq(15)').text();
                var totalAmount = row.find('td:eq(16)').text();

                row.html("<td><input type='number' readonly name='Id' class='input-field  purchase-id w2' value='" + id + "'></td>" +
                    "<td><select name='product' class='input-field product-name dropdown' id='productname_" + id + "'><option selected disabled>Select product</option></select></td>" +
                    "<td><input type='text' name='batchNo' class='input-field' value='" + batchNo + "' readonly></td>" +
                    "<td><input type='text' name='tax' class='input-field' value='" + tax + "' readonly></td>" +
                    "<td><input type='number' name='quantity' class='input-field' value='" + quantity + "'></td>" +
                    "<td class='d-none'><input type='number' name='free' class='input-field' value='" + free + "'></td>" +
                    "<td class='d-none'><input type='text' name='uom' class='input-field' value='" + uom + "'></td>" +
                    "<td><input type='number' name='purcRate' class='input-field' value='" + purcRate + "' readonly></td>" +
                    "<td class='d-none'><input type='number' name='mrp' class='input-field' value='" + mrp + " readonly'></td>" +
                    "<td><input type='number' name='rate' class='input-field  w-200' value='" + rate + "'></td>" +
                    "<td><select name='discMode' class='input-field disc-mode dropdown' id='discMode_" + id + "'><option selected disabled>Select Disc Mode</option></select></td>" +
                    "<td><input type='number' name='discount' class='input-field' value='" + discount + "'></td>" +
                    "<td><input type='number' name='amount' class='input-field' value='" + amount + "' readonly></td>" +
                    "<td class='d-none'><input type='number' name='cgst' class='input-field' value='" + cgst + "' readonly></td>" +
                    "<td class='d-none'><input type='number' name='sgst' class='input-field' value='" + sgst + "'readonly></td>" +
                    "<td class='d-none'><input type='number' name='igst' class='input-field' value='" + igst + "'readonly></td>" +
                    "<td class='d-none'><input type='number' name='totalAmount' class='input-field' value='" + totalAmount + "'readonly></td>" +
                    "<td><i class='fa-solid fa-trash deletetransBtn' type='button' data-id='" + id + "'></i></td>");


                fetchProductOptions(id, product);
                fetchDiscModeOptions(id, discMode);
            });

            calculateTotals();
            adjustColumnWidths();
        });
     
     
        function adjustColumnWidths() {
            $('#customerTable').DataTable().columns.adjust().draw();
        }

        $(document).on('click', '.deletetransBtn', function () {
            var row = $(this).closest('tr');
            var id = row.find('.purchase-id').val();
            if (!confirm('Are you sure you want to delete this row?')) {
                return;
            }
            $.ajax({
                type: 'DELETE',
                url: `/auth/salesretailtransdelete/${id}`,
                success: function (response) {
                    if (response.success) {
                        table.row(row).remove().draw(false);
                        calculateTotals();
                        showBootstrapModal('Trans Row Deleted Successfully 🖋');
                    } else {
                        alert('Failed to delete row: ' + response.message);
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error deleting row:', error);
                    alert('An error occurred while deleting the row.');
                }
            });
        });

        $(document).ready(function () {

            $('#paymentmode').change(function () {
                $('#ppaymentMode').val($(this).val());
            });

            $('#draftBtn').on('click', function () {
                // Set the value of is_Draft to 1
                $('#is_Draft').val('1');
                console.log('Draft button clicked, is_Draft value set to 1');
                // Trigger the click event of the update button
                $('.updateBtn').click();
            });
            $(document).on('click', '.updateBtn', function (event) {
                event.preventDefault();
                var purchaseId = $('input[name="id"]').val();
                if (!purchaseId) {
                    console.error('No purchase ID entered.');
                    alert('No purchase ID entered. Please enter a purchase ID to update.');
                    return;
                }
                var purchaseDetails = {
                    id: $('#id').val(),
                    saledate: $('#saledate').val(),
                    paymentmode: $('#ppaymentMode').val(),
                    customername: $('#customerSelect').val() || $('#customerId').val(),
                    doctorname: $('#doctorname').val(),
                    pamount: parseFloat($('#pamount_').val()) || 0,
                    pigst: parseFloat($('#pigst_').val()),
                    pcgst: parseFloat($('#pcgst_').val()),
                    psgst: parseFloat($('#psgst_').val()),
                    psubtotal: parseFloat($('#psubtotal_').val()),
                    pcess: parseFloat($('#pcess_').val()),
                    ptcs: parseFloat($('#ptcs_').val()),
                    proundOff: parseFloat($('#proundOff_').val()),
                    pnetAmount: parseFloat($('#pnetAmount_').val()),
                    pdiscMode_: parseFloat($('#pdiscMode_').val()) || 3, // Make sure this ID matches the discount mode field ID in the HTML
                    pdiscount: parseFloat($('#pdiscount_').val()),
                    isDraft: $('#is_Draft').val() || 0// Make sure this ID matches the discount field ID in the HTML
                };
                console.log('Purchase Details:', purchaseDetails);
                var payload = {
                    purchaseId: purchaseId,
                    purchaseDetails: purchaseDetails,
                    products: getUpdatedProductsData()
                };
                // Collect values before form submission
                let formData = $('#purchaseDetails').serialize();
                console.log(formData);  // Check what data is being sent

                console.log('Payload:', payload);
                $.ajax({
                    type: 'PUT',
                    url: '/auth/salesretailEdit/' + purchaseId, // Ensure this uses purchaseId
                    contentType: 'application/json',
                    data: JSON.stringify(payload),
                     success: function (response) {
                        console.log(response);
                        if (response.success) {
                            // Check if the response contains a draft value
                            if ($('#is_Draft').val() === '1') {
                                showBootstrapModal('Sale Saved as Draft Successfully 🖋', function () {
                                    window.location.href = '/salesretaildraft'; // Redirect to draft page
                                });
                            } else {
                                showBootstrapModal('Sales Updated Successfully 🖋', function () {
                                    window.location.href = '/salesretailregister'; // Redirect to sales register
                                });
                            }
                        } else {
                            alert("Failed to update purchase: " + response.message);
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error updating purchase:', error);
                        console.error('Response:', xhr.responseText); // Log the response for more detail
                        alert("Failed to update purchase. Check console for details.");
                    }
                });

            
            });
     
     
        });



        function getUpdatedProductsData() {
            var products = [];
            $('#customerTable tbody tr').each(function () {
                try {
                    var Id = $(this).find('.purchase-id').val();
                    var product = $(this).find('.product-name').val();
                    var batchNo = $(this).find('[name="batchNo"]').val();
                    var tax = $(this).find('[name="tax"]').val();
                    var quantity = $(this).find('[name="quantity"]').val();
                    var free = $(this).find('[name="free"]').val() || 0;
                    var uom = $(this).find('[name="uom"]').val();
                    var purcRate = $(this).find('[name="purcRate"]').val();
                    var mrp = $(this).find('[name="mrp"]').val() || 0;
                    var rate = $(this).find('[name="rate"]').val();
                    var discMode = $(this).find('[name="discMode"]').val() || 3;
                    var discount = $(this).find('[name="discount"]').val() || 0;
                    var amount = $(this).find('[name="amount"]').val();
                    var cgst = $(this).find('[name="cgst"]').val();
                    var sgst = $(this).find('[name="sgst"]').val();
                    var igst = $(this).find('[name="igst"]').val();
                    var totalAmount = $(this).find('[name="totalAmount"]').val();
                    var product = {
                        Id: Id,
                        productId: product,
                        batchNo: batchNo,
                        tax: tax,
                        quantity: quantity,
                        free: free,
                        uom: uom,
                        purcRate: purcRate,
                        mrp: mrp,
                        rate: rate,
                        discMode: discMode,
                        discount: discount,
                        amount: amount,
                        cgst: cgst,
                        sgst: sgst,
                        igst: igst,
                        totalAmount: totalAmount
                    };
                    products.push(product);
                } catch (error) {
                    console.error('Error processing row:', this);
                    console.error('Error details:', error);
                }
            });
            return products;
        }

        function fetchProductOptions(id, product) {
            $.ajax({
                  url: '/auth/sales/salesproductname',
                method: 'GET',
                success: function (response) {
                    console.log('Product Options:', response); // Check response in console
                    // Populate the product dropdown with response.data and select the matching product name
                    populateDropdown('#productname_' + id, response.data, product);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching product options:', error);
                }
            });
        }

        function fetchDiscModeOptions(id, discModeData) {
            $.ajax({
                url: '/auth/purchase/discmode',
                method: 'GET',
                success: function (response) {
                    console.log('Disc Mode Options:', response); // Check response in console
                    populateDropdown('#discMode_' + id, response.data, discModeData);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching discMode options:', error);
                }
            });
        }

        function populateDropdown(selector, options, selectedOption) {
            var dropdown = $(selector);
            dropdown.empty();
            // Add default option
            dropdown.append($('<option>').text('Select').attr('value', ''));
            options.forEach(function (option) {
                if (typeof option === 'object') {
                    var productName = option.productname ? option.productname.trim() : '';
                    var discMode = option.discMode ? option.discMode.trim() : '';
                    var optionText = (productName && discMode) ? productName + ' (' + discMode + ')' : productName || discMode || '';
                    var optionValue = option.id;
                    var isSelected = optionText === selectedOption;
                    dropdown.append($('<option>').text(optionText).attr('value', optionValue).prop('selected', isSelected));
                } else {
                    dropdown.append($('<option>').text(option).attr('value', option));
                }
            });
        }

        $(document).ready(function () {
            $(document).on('click', '.deletemasBtn', function () {
                var id = getSelectedPurchaseId();
                var deleteUrl = '/auth/salesretaildelete/' + id;
                $.ajax({
                    type: 'DELETE',
                    url: deleteUrl,
                    success: function (response) {
                        console.log(response);
                        if (response.success) {
                         showBootstrapModal('Sales Retail Deleted Successfully 🖋', function () {
                                window.location.href = '/salesretailregister';
                            });
                        } else {
                            alert("Failed to delete purchase: " + response.error);
                        }
                    },
                    error: function (error) {
                        console.error('Error deleting purchase:', error);
                        alert("Failed to delete purchase. Check console for details.");
                    }
                });
            });
            function getSelectedPurchaseId() {
                var selectedOption = $('.dropdown[name="Id"] option:selected');
                if (!selectedOption || !selectedOption.val()) {
                    console.error('No purchase option selected');
                    return null;
                }
                try {
                    var rowDetails = JSON.parse(selectedOption.val());
                    return rowDetails.id;
                } catch (error) {
                    console.error('Error parsing JSON:', error);
                    return null;
                }
            }
        });

        $(document).ready(function () {
            // Cache jQuery selectors for reuse and performance
            var $div = $('.div'),
                $add = $('.add'),
                $opener = $('.opener'),
                $updateBtn = $('.updateBtn'),
                $draftBtn = $('.draftBtn'),
                $dropdown = $('.dropdown[name="Id"]'),
                $editBtn = $('.editmasbtn');

            // Initial state
            $div.hide();
            $add.show();
            $updateBtn.add($draftBtn).addClass('disabled').prop('disabled', true);

            // Handle dropdown change event
            $dropdown.on('change', function () {
                var selectedOption = $(this).find('option:selected').val();

                // Check for valid selected option
                if (selectedOption && selectedOption !== 'view details') {
                    $div.show();
                    $opener.hide();
                    $add.hide();
                } else {
                    $div.hide();
                    $add.show();
                }
            });

            // Handle edit button click event
            $editBtn.on('click', function () {
                // Enable all buttons inside the div
                $div.find('button').prop('disabled', false);
                // Enable and style the update and draft buttons
                $updateBtn.add($draftBtn)
                    .removeClass('disabled')
                    .addClass('btn-info')
                    .prop('disabled', false);
            });
        });

        // Add an event listener to validate the quantity field on input
        document.addEventListener('input', function (event) {
            if (event.target.matches('.quantity')) {
                let quantityInput = event.target;
                let freeInput = document.querySelector(`#free_${quantityInput.id.split('_')[1]}`); // Get corresponding free input field
                // Parse the value as an integer
                let quantityValue = parseInt(quantityInput.value, 10);
                let maxQuantity = parseInt(quantityInput.getAttribute('max'), 10);
                // If the value is NaN (not a number) or less than 1, set the value to an empty string
                if (isNaN(quantityValue) || quantityValue < 0) {
                    quantityInput.value = '';
                } else if (quantityValue > maxQuantity) {
                    quantityInput.value = maxQuantity;
                }
                // Validate the free input field
                if (freeInput) {
                    let freeValue = parseInt(freeInput.value, 10) || 0;
                    if (quantityValue + freeValue > maxQuantity) {
                        alert('The sum of quantity and free value cannot exceed the maximum quantity.');
                        freeInput.value = ''; // Clear the free field
                    }
                }
            }
        });

        // Add an event listener to validate the free field on input
        document.addEventListener('input', function (event) {
            if (event.target.matches('.input-field') && event.target.name === 'free') {
                let freeInput = event.target;
                let quantityInput = document.querySelector(`#quantity_${freeInput.id.split('_')[1]}`); // Get corresponding quantity input field
                // Parse the values as integers
                let freeValue = parseInt(freeInput.value, 10) || 0;
                let quantityValue = parseInt(quantityInput.value, 10);
                let maxQuantity = parseInt(quantityInput.getAttribute('max'), 10);
                // Validate the sum of quantity and free values
                if (quantityValue + freeValue > maxQuantity) {
                    alert('The sum of quantity and free value cannot exceed the maximum quantity.');
                    freeInput.value = ''; // Clear the free field
                }
            }
        });

        // Prevent mouse wheel from changing the value of the input field
        document.addEventListener('wheel', function (event) {
            if (event.target.matches('.quantity, .input-field')) {
                event.preventDefault(); // Prevent scrolling from affecting the input field value
            }
        }, { passive: false });
        // Function to set quantity and max attributes
        function updateQuantityInput(uniqueId, quantity) {
            let quantityInput = document.getElementById('quantity_' + uniqueId);
            if (quantityInput) {
                quantityInput.value = Math.max(1, quantity); // Ensure the value is at least 1
                quantityInput.setAttribute('max', quantity);
                // Also update the max attribute of the corresponding free input field
                let freeInput = document.getElementById('free_' + uniqueId);
                if (freeInput) {
                    freeInput.setAttribute('max', quantity);
                }
            }
        }
            function showBootstrapModal(message, callback) {
                // Set the message in the modal
                $('#modalMessage').text(message);

                // Show the modal
                var myModal = new bootstrap.Modal(document.getElementById('alertModal'));
                myModal.show();

                // When the modal is hidden, execute the callback if provided
                $('#alertModal').on('hide.bs.modal', function () {
                    if (typeof callback === 'function') {
                        callback();
                    }
                });
            }
     
        $(document).ready(function () {
            // Initialize DataTable
            let table = $('#customerTable').DataTable();
            let products = [];
            let uniqueId = generateUniqueId();
            calculateTotals();
            // Open Purchase Form and Add New Row 
            $('#openPurchaseForm').on('click', function () {
                let purchaseId = generateUniqueId();
                $('#purchaseId').val(purchaseId);
                uniqueId = generateUniqueId();


                let rowCount = $('#customerTable tbody tr').length;

                // If there are existing rows, validate the last one
                if (rowCount > 0) {
                    let lastRow = $('#customerTable tbody tr:last');
                    let isValid = true;

                    // Check for required fields in the last row
                    $(lastRow).find('input[required]').each(function () {
                        if (!$(this).val()) {
                            isValid = false;
                            return false; // Exit the loop if a required field is empty
                        }
                    });

                    // If validation fails, show an alert and return
                    if (!isValid) {
                        showBootstrapModal("Please fill in all required fields in the last row before adding a new one.");
                        return; // Prevent adding a new row
                    }
                }


                let newRow = $("<tr data-uniqueId='" + uniqueId + "'>" +
                    "<td><input type='hidden' name='purchaseId' class='input-field purchase-id' value='" + purchaseId + "'></td>" +
                    "<td><select name='productname' class='input-field product-name dropdown' id='productname_" + uniqueId + "' placeholder='Product Name' required><option selected disabled>Select product</option></select></td>" +
                    "<td><input type='text' name='batchNo' class='input-field' id='batchNo_" + uniqueId + "' placeholder='Batch No' readonly></td>" +
                    "<td><input type='text' name='tax' class='input-field' id='tax_" + uniqueId + "' placeholder='Tax(%)'readonly ></td>" +
                    "<td><input type='number' name='quantity' min='1' class='input-field quantity' id='quantity_" + uniqueId + "' placeholder='Quantity' oninput='this.value = this.value.replace(/[^0-9]/g, \"\")' required></td>" +
                    "<td class='d-none'><input type='number' name='free'min='0' class='input-field' id='free_" + uniqueId + "' placeholder='Free' oninput='this.value = this.value.replace(/[^0-9]/g, \"\")'></td>" +
                    "<td class='d-none'><input type='text' name='uom' class='input-field' id='uom_" + uniqueId + "' placeholder='UOM'></td>" +
                    "<td><input type='number' name='purcRate' class='input-field' id='purcRate_" + uniqueId + "' placeholder='purcRate' readonly></td>" +
                    "<td class='d-none'><input type='number' name='mrp' class='input-field' id='mrp_" + uniqueId + "' placeholder='MRP' readonly></td>" +
                    "<td><input type='number' name='rate' class='input-field' id='rate_" + uniqueId + "' placeholder='Rate' required></td>" +
                    "<td><select name='discMode' class='input-field product-name dropdown' id='discMode_" + uniqueId + "' placeholder='Disc.Mode' ><option selected disabled>Select Disc Mode</option></select></td>" +
                    "<td><input type='number' name='discount' class='input-field' id='discount_" + uniqueId + "' placeholder='Discount' disabled></td>" +
                    "<td><input type='number' name='amount' class='input-field' id='amount_" + uniqueId + "' placeholder='Amount'></td>" +
                    "<td class='d-none'><input type='number' name='cgst' class='input-field' id='cgst_" + uniqueId + "' placeholder='CGST'></td>" +
                    "<td class='d-none'><input type='number' name='sgst' class='input-field' id='sgst_" + uniqueId + "' placeholder='SGST'></td>" +
                    "<td class='d-none'><input type='number' name='igst' class='input-field' id='igst_" + uniqueId + "' placeholder='IGST'></td>" +
                    "<td class='d-none'><input type='number' name='totalAmount' class='input-field' id='totalAmount_" + uniqueId + "' placeholder='Total Amount'></td>" +
                    "<td class='action new-row'><i class='fa-solid fa-trash deleteRowBtn text-danger' type='button'></i> <i class='fa-solid fa-plus addRowBtn text-success' type='button'></i></td>" +
                    "</tr>");
                $('#customerTable tbody').append(newRow);
                table.rows.add([newRow[0]]).draw();
                   // Scroll to the newly added row
                let rowElement = newRow[0];
                rowElement.scrollIntoView({ behavior: 'smooth', block: 'nearest', inline: 'start' });

                // Optionally, focus on the first input in the new row (if needed)
                $(newRow).find('input:first').focus();
                // Fetch product options and populate the product dropdown
                $.ajax({
                       url: '/auth/sales/salesproductname',
                    method: 'GET',
                    success: function (response) {
                        var options = response.data;
                        if (options && options.length) {
                            options.forEach(function (option) {
                                $('#productname_' + uniqueId).append($('<option>', {
                                    value: option.id,
                                    text: option.productname
                                }));
                            });
                            // Initialize Select2 with search filter functionality
                            $('#productname_' + uniqueId).select2({
                                placeholder: 'Select a product',
                                allowClear: true,
                                width: '100%', // Adjusts the dropdown to full width
                                minimumInputLength: 1, // Starts searching after 1 character
                                matcher: function (params, data) {
                                    if ($.trim(params.term) === '') {
                                        return data;
                                    }
                                    // Custom matcher for case-insensitive search
                                    if (typeof data.text === 'undefined') {
                                        return null;
                                    }
                                    if (data.text.toLowerCase().indexOf(params.term.toLowerCase()) > -1) {
                                        return data;
                                    }
                                    return null;
                                }
                            });

                            // Handle product selection
                            $('#productname_' + uniqueId).on('change', function () {
                                var selectedProductId = $(this).val();
                                var selectedProduct = options.find(function (product) {
                                    return product.id == selectedProductId;
                                });

                                if (selectedProduct) {
                                    fetchBatchDetails(selectedProductId, uniqueId);
                                }
                            });

                            fetchDiscmodeOptions(uniqueId);
                            disableOpener();
                        } else {
                            console.error('No options found for product name');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching options for product name:', error);
                    }
                });

            });


          // Delete Row
            function disableOpener() {
                $('#openPurchaseForm').prop('disabled', true);
            }

            $('#customerTable tbody').on('click', 'i.deleteRowBtn', function () {
                let row = $(this).closest("tr");
                if (row) {
                    table.row(row).remove().draw(false);
                    calculateTotals();
                }
            });

            $('#customerTable tbody').on('click', 'i.addRowBtn', function () {
                // Get the uniqueId of the current row to validate it
                let row = $(this).closest("tr");
                let uniqueId = row.attr('data-uniqueid'); // Get the unique ID from the row
                // Trigger validation before allowing a new row to be added
                let isValid = true;
                if (isValid) {
                    // If validation passes, trigger adding a new row
                    $('#openPurchaseForm').click();
                } else {
                    // If validation fails, do not add a new row and show alert
                    alert('Please correct the errors before adding a new row.');
                }
            });

            $('#productname_' + uniqueId).on('change', function () {
                var selectedProductId = $(this).val();
                var selectedBatchNo = $('#batchNo_' + uniqueId).val(); // Ensure batchNo is populated
                if (isProductBatchAlreadySelected(selectedProductId, selectedBatchNo)) {
                    alert('This product and batch is already selected.');
                } else {
                    fetchBatchDetails(selectedProductId, uniqueId);
                }
            });
            // Submit Form
            $(document).ready(function () {
                // Event listener for Draft Button
                $('#draftButton').on('click', function () {
                    $('#is_Draft').val('1'); // Set is_Draft to 1 for draft
                    submitForm(); // Submit directly without validation
                });
                function showAlert(message) {
                    $('#alertMessage').text(message);
                    $('#alertBox').show();
                }
                // Event listener for Submit Button
                $('#submitFormBtn').on('click', function () {
                    if (!validateRows()) {
                        let alertMessage = 'Please correct the errors before submitting.';
                        alert("Please correct the errors before submitting");
                        showAlert(alertMessage);
                        return; // Stop form submission if validation fails
                    }
                    let roundOff = parseFloat($('#proundOff').text()) || 0;
                    if (roundOff === 0) {
                        submitForm(); // Submit directly if no round-off value
                    } else {
                        $('#confirmationModal').modal('show'); // Show modal if round-off is not zero
                    }
                });

                // Confirm submit in the modal
                $('#confirmSubmitBtn').on('click', function () {
                    $('#is_Draft').val('1'); // Ensure it's set to submit
                    submitForm(); // Submit form
                    $('#confirmationModal').modal('hide'); // Hide the modal
                });

                // Form submit logic
                function submitForm() {
                    let formData = $('#purchaseDetails').serializeArray();
                    let products = getProductsData();
                    // formData.push({ name: 'customerId', value: $('#customerId').val() });
                    formData.push({ name: 'products', value: JSON.stringify(products) });
                    formData.push({ name: 'isDraft', value: $('#is_Draft').val() });
                    console.log("Serialized Form Data:", formData);
                    $.ajax({
                        url: '/auth/salesretail',
                        method: 'POST',
                        data: formData,
                        success: function (response) {
                            console.log(response);
                            if (response.success) {
                                // Check if the response contains a draft value
                                if ($('#is_Draft').val() === '1') {
                                    showBootstrapModal('Sale Saved as Draft Successfully 🖋', function () {
                                        window.location.href = '/salesretaildraft'; // Redirect to draft page
                                    });
                                } else {
                                    showBootstrapModal('Sales Updated Successfully 🖋', function () {
                                        window.location.href = '/salesretailregister'; // Redirect to sales register
                                    });
                                }
                            } else {
                                alert("Failed to update purchase: " + response.message);
                            }
                        },
                        error: function (error) {
                            console.error("Error submitting form:", error);
                            alert("Error submitting form: " + error.statusText);
                        }
                    });

                }

                // Attach event listeners to the inputs to trigger validation on change
                $(document).on('change', '.input-field', function () {
                    // Extract uniqueId from the relevant input field
                    let uniqueId = $(this).attr('id').split('_')[1]; // Assuming IDs are in the format of 'prefix_uniqueId'
                    // Call the validateAmount function to check the current values
                    validateAmount(uniqueId);
                });

                // Your existing validateAmount function
                function validateAmount(uniqueId) {
                    try {
                        if ($('#discount_' + uniqueId).prop('disabled')) {
                            return true; // If discount is disabled, no validation needed
                        }
                        let amount = parseFloat($('#amount_' + uniqueId).val()) || 0;
                        let purcRate = parseFloat($('#purcRate_' + uniqueId).val()) || 0;
                        let quantity = parseFloat($('#quantity_' + uniqueId).val()) || 0;
                        let taxPercentage = parseFloat($('#tax_' + uniqueId).val()) || 0;
                        console.log('Amount:', amount);
                        console.log('Purchase Rate:', purcRate);
                        console.log('Quantity:', quantity);
                        console.log('Tax Percentage:', taxPercentage);
                        if (purcRate <= 0 || quantity <= 0) {
                            console.error('Purchase rate or quantity is invalid.');
                            return false;
                        }
                        let baseAmount = purcRate * quantity;
                        let taxAmount = (baseAmount * taxPercentage) / 100;
                        let totalExpectedAmount = baseAmount + taxAmount;
                        console.log('Base Amount:', baseAmount);
                        console.log('Tax Amount:', taxAmount);
                        console.log('Total Expected Amount:', totalExpectedAmount);
                        if (amount < totalExpectedAmount) {
                            let productName = $('#productname_' + uniqueId + ' option:selected').text();
                            let alertMessage = 'Amount cannot be less than Purchase Amount (' + baseAmount + ') plus ' + taxPercentage + '% tax for product: ' + productName;
                            showAlert(alertMessage);
                            $('#amount_' + uniqueId).addClass('error');
                            console.error('Validation failed: Amount is less than totalExpectedAmount.');
                            return false; // Validation failed
                        } else {
                            $('#amount_' + uniqueId).removeClass('error');
                            $('#alertBox').hide();
                            console.log('Validation passed: Amount is correct.');
                            return true; // Validation passed
                        }
                    } catch (error) {
                        console.error('Error in validateAmount:', error);
                    }
                }
                // Real-time input validation on rate field
                $(document).on('input', 'input[name="rate"]', function () {
                    let uniqueId = $(this).attr('id').split('_')[1];
                    validateRate(uniqueId);
                });
              
                function validateRate(uniqueId) {
                    let rate = parseFloat($('#rate_' + uniqueId).val());
                    let purcRate = parseFloat($('#purcRate_' + uniqueId).val());
                    if (rate < purcRate) {
                        let productName = $('#productname_' + uniqueId + ' option:selected').text();
                        let alertMessage = 'Rate cannot be less than Purchase Rate for product: ' + productName;
                        showAlert(alertMessage);
                        $('#rate_' + uniqueId).addClass('error');
                    } else {
                        $('#rate_' + uniqueId).removeClass('error');
                        $('#alertMessage').addClass('d-none'); // Hide the alert if the condition is corrected
                    }
                }
              
                function validateRows() {
                    let isValid = true;
                    let rows = $('#customerTable tbody tr');
                    $('#alertMessage').addClass('d-none').html(''); // Clear any previous alerts
                    // Check if there are any rows
                    if (rows.length === 0) {
                        showAlert('No rows found. Please add at least one row.');
                        return false;
                    }
                    rows.each(function () {
                        let uniqueId = $(this).find('select[name="productname"]').attr('id').split('_')[1];
                        let isRowValid = true;
                        // Define the required fields
                        let requiredFields = [
                            '#productname_' + uniqueId,
                            '#batchNo_' + uniqueId,
                            '#quantity_' + uniqueId,
                            '#rate_' + uniqueId,
                            '#mrp_' + uniqueId
                        ];
                        // Validate required fields
                        requiredFields.forEach(function (selector) {
                            let $field = $(selector);
                            if (!$field.val()) {
                                isRowValid = false;
                                $field.addClass('error'); // Add error class to invalid fields
                            } else {
                                $field.removeClass('error'); // Remove error class if valid
                            }
                        });
                        // Validate rate vs purcRate
                        let rate = parseFloat($('#rate_' + uniqueId).val());
                        let purcRate = parseFloat($('#purcRate_' + uniqueId).val());
                        if (rate < purcRate) {
                            isRowValid = false;
                            validateRate(uniqueId); // Show the alert immediately for this row
                        }
                        // Validate amount vs purcQuantityRate
                        if (!validateAmount(uniqueId)) {
                            isRowValid = false;
                        }
                        if (!isRowValid) {
                            isValid = false;
                            $('html, body').animate({
                                scrollTop: $(this).find('.error').first().offset().top
                            }, 500); // Scroll to the first invalid field
                        }
                    });
                    if (!isValid) {
                        let alertMessage = 'Please correct the errors before submitting.';
                        showAlert(alertMessage);
                    }
                    return isValid;
                }

                // Function to show Bootstrap alert
                function showAlert(alertMessage) {
                    $('#alertMessage').removeClass('d-none').html(alertMessage +
                        '<button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>');
                }
            });
            // Get Product Data
            function getProductsData() {
                var products = [];
                $('#customerTable tbody tr').each(function () {
                    var uniqueId = $(this).find('select[name="productname"]').attr('id');
                    if (uniqueId) {
                        uniqueId = uniqueId.split('_')[1];
                        var product = {
                            purchaseId: $(this).find('.purchase-id').val(),
                            productId: $('#productname_' + uniqueId).val() || "",
                            batchNo: $('#batchNo_' + uniqueId).val() || "",
                            tax: parseFloat($('#tax_' + uniqueId).val()) || 0,
                            quantity: parseFloat($('#quantity_' + uniqueId).val()) || 0,
                            free: parseFloat($('#free_' + uniqueId).val()) || 0,
                            uom: $('#uom_' + uniqueId).val() || "",
                            purcRate: parseFloat($('#purcRate_' + uniqueId).val()) || 0,
                            mrp: parseFloat($('#mrp_' + uniqueId).val()) || 0,
                            rate: parseFloat($('#rate_' + uniqueId).val()) || 0,
                            discMode: $('#discMode_' + uniqueId).val() || 3,
                            discount: parseFloat($('#discount_' + uniqueId).val()) || 0,
                            amount: parseFloat($('#amount_' + uniqueId).val()) || 0,
                            cgst: parseFloat($('#cgst_' + uniqueId).val()) || 0,
                            sgst: parseFloat($('#sgst_' + uniqueId).val()) || 0,
                            igst: parseFloat($('#igst_' + uniqueId).val()) || 0,
                            totalAmount: parseFloat($('#totalAmount_' + uniqueId).val()) || 0
                        };
                        products.push(product);
                    }
                });
                return products;
            }
            function isProductBatchAlreadySelected(selectedProductId, batchNo) {
                let exists = false;
                $('#customerTable tbody tr').each(function () {
                    let existingProductId = $(this).find('select[name="productname"]').val();
                    let existingBatchNo = $(this).find('input[name="batchNo"]').val();
                    if (existingProductId == selectedProductId && existingBatchNo == batchNo) {
                        exists = true;
                        return false; // Exit loop if a match is found
                    }
                });
                return exists;
            }

            // Fetch Batch Details
            function fetchBatchDetails(selectedProductId, uniqueId) {
                console.log('Selected Product ID:', selectedProductId);

                var requestData = {
                    selectedProductId: selectedProductId
                };
                $.ajax({
                    url: '/auth/salesretail/retailbatchDetails/' + selectedProductId,
                    method: 'POST',
                    contentType: 'application/json',
                    data: JSON.stringify(requestData),
                    success: function (response) {
                        console.log('Received response for batch details:', response);
                        if (response.success) {
                            let rows = [];
                            response.data.forEach(function (batch) {
                                let expiryDate = new Date(batch.expiryDate);
                                let formattedExpiry = expiryDate.getFullYear() !== 1970
                                    ? expiryDate.toLocaleDateString('en-US', { year: 'numeric', month: 'short' })
                                    : 'N/A';
                                let now = new Date();
                                let currentMonth = new Date(now.getFullYear(), now.getMonth(), 1);
                                let threeMonthsAhead = new Date(now.getFullYear(), now.getMonth() + 3, 1);
                                let backgroundColor = '';
                                let color = '';
                                let selectable = true;
                                if (expiryDate < currentMonth) {
                                    backgroundColor = 'red';
                                    color = 'white';
                                    selectable = false;
                                } else if (expiryDate >= currentMonth && expiryDate < threeMonthsAhead) {
                                    backgroundColor = 'orange';
                                    color = 'white';
                                } else {
                                    backgroundColor = ''; // Default background
                                    color = '';
                                }
                                 let isAlreadySelected = isProductBatchAlreadySelected(selectedProductId, batch.batchNo);
                                // Skip adding the batch if it is already selected for this product
                               
                                    rows.push({
                                        uniqueId: uniqueId,
                                        batchNo: batch.batchNo,
                                        expiryDate: batch.expiryDate,
                                        tax: batch.tax,
                                        quantity: batch.retailQty,
                                        uom: batch.uom,
                                        rate: batch.retailRate,
                                        mrp: batch.retailMrp,
                                        backgroundColor: backgroundColor,
                                        color: color,
                                        selectable: !isAlreadySelected && selectable,
                                        formattedExpiry: formattedExpiry,
                                        alreadySelected: isAlreadySelected
                                    });
                                
                            });
                            // Sort rows by color priority: Orange first, Normal second, Red last
                            rows.sort(function (a, b) {
                                let colorOrder = { 'orange': 1, '': 2, 'red': 3 };
                                return colorOrder[a.backgroundColor] - colorOrder[b.backgroundColor];
                            });
                            // Clear existing rows and append sorted rows
                            $('#batchDetailsBody').empty();
                            rows.forEach(function (row) {
                                $('#batchDetailsBody').append(
                                    `<tr data-uniqueId="${row.uniqueId}" 
                            data-batchNo="${row.batchNo}" 
                            data-expiryDate="${row.expiryDate}" 
                            data-tax="${row.tax}" 
                            data-quantity="${row.quantity}" 
                            data-uom="${row.uom}" 
                            data-rate="${row.rate}" 
                            data-mrp="${row.mrp}" 
                            style="background-color: ${row.backgroundColor}; color: ${row.color};" 
                             class="${row.selectable ? '' : 'non-selectable'} ${row.alreadySelected ? 'already-selected' : ''}">
                            <td>${row.batchNo}</td>
                            <td>${row.formattedExpiry}</td>
                            <td>${row.tax}</td>
                            <td>${row.quantity}</td>
                            <td>${row.uom}</td>
                            <td>${row.rate}</td>
                            <td>${row.mrp}</td>
                        </tr>`
                                );
                            });
                            $('#overlay').show();
                            $('#batchform').show();
                        } else {
                            console.error('No batch details found for the selected product');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching batch details:', error);
                        $('#batchDetailsBody').empty().append(
                            `<tr><td colspan="7">Error fetching batch details: ${error}</td></tr>`
                        );
                        $('#overlay').show();
                        $('#batchform').show();
                    }
                });
            }
            $('#batchDetailsBody').on('click', 'tr', function () {
                // Check if the row has the class "non-selectable"
                if ($(this).hasClass('non-selectable')) {
                    console.log('This row is not selectable');
                    return; // Prevent further actions if the row is not selectable
                }
                // Retrieve uniqueId from the clicked row
                var uniqueId = $(this).attr('data-uniqueId');
                console.log('Retrieved uniqueId:', uniqueId);
                // Retrieve selectedProductId from the dropdown associated with this row
                var selectedProductId = $('#productname_' + uniqueId).val();
                console.log('Retrieved selectedProductId:', selectedProductId);
                // Retrieve values from the clicked row
                var batchNo = $(this).find('td:eq(0)').text();
                var tax = $(this).find('td:eq(2)').text();
                var quantity = $(this).find('td:eq(3)').text();
                var uom = $(this).find('td:eq(4)').text();
                var rate = $(this).find('td:eq(5)').text();
                var mrp = $(this).find('td:eq(6)').text();
                // Update input fields in the customerTable with uniqueId
                $('#batchNo_' + uniqueId).val(batchNo);
                $('#tax_' + uniqueId).val(tax);
                $('#quantity_' + uniqueId).val(quantity).attr('max', quantity);
                $('#uom_' + uniqueId).val(uom);
                $('#purcRate_' + uniqueId).val(rate);
                $('#mrp_' + uniqueId).val(mrp);
                $('#rate_' + uniqueId).val(mrp).attr('max', mrp);
                // Hide overlay and batch form
                $('#overlay').hide();
                $('#batchform').hide();
            });
            // Close Batch Form
            $('#closeBatchForm').on('click', function () {
                $('#overlay').hide();
                $('#batchform').hide();
            });
            // Fetch Discount Mode Options
            function fetchDiscmodeOptions(uniqueId) {
                $.ajax({
                    url: '/auth/purchase/discmode',
                    method: 'GET',
                    success: function (response) {
                        var discmodeOptions = response.data;
                        if (discmodeOptions && discmodeOptions.length) {
                            discmodeOptions.forEach(function (option) {
                                $('#discMode_' + uniqueId).append($('<option>', {
                                    value: option.id,
                                    text: option.discMode
                                }));
                            });
                        } else {
                            console.error('No options found for discount mode');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching options for discount mode:', error);
                    }
                });
            }
            // Generate Unique ID
            function generateUniqueId() {
                return Math.floor(Math.random() * 1000000);
            }
            $(document).ready(function () {
                // Trigger validation on discount, rate, quantity, or amount change
                $('#customerTable tbody').on('input', 'input[name="discount"], input[name="rate"], input[name^="quantity"], input[name="amount"]', function () {
                    let uniqueId = $(this).attr('id').split('_')[1]; // Get the unique ID from the input element
                    validateAmount(uniqueId);
                });
                // Validation function for amount check
                function validateAmount(uniqueId) {
                    // Check if the discount input is disabled; if yes, skip validation
                    if ($('#discount_' + uniqueId).prop('disabled')) {
                        // No need to run validation or show an alert if discount is disabled
                        return;
                    }
                    // Parse values and handle potential NaN (Not-a-Number) issues
                    let amount = parseFloat($('#amount_' + uniqueId).val()) || 0;
                    let purcRate = parseFloat($('#purcRate_' + uniqueId).val()) || 0;
                    let quantity = parseFloat($('#quantity_' + uniqueId).val()) || 0;
                    // Calculate purchase rate * quantity
                    let purcQuantityRate = purcRate * quantity;
                    // Check if the amount is less than the purchase quantity rate
                    if (amount < purcQuantityRate) {
                        let productName = $('#productname_' + uniqueId + ' option:selected').text();
                        let alertMessage = 'Amount cannot be less than Purchase Amount for product: ' + productName;
                        showAlert(alertMessage); // Show the alert message
                        $('#amount_' + uniqueId).addClass('error');
                    } else {
                        // If the amount is valid, remove error class and hide the alert
                        $('#amount_' + uniqueId).removeClass('error');
                        $('#alertMessage').addClass('d-none'); // Hide the alert if the condition is corrected
                    }
                }
                // Trigger validation on discMode change
                $(document).on('change', "select[name='discMode']", function () {
                    var uniqueId = $(this).attr('id').split('_')[1]; // Get the unique ID
                    var discountInput = $('#discount_' + uniqueId);   // Find the corresponding discount input

                    if ($(this).val() !== null) {
                        // Enable the discount input if a valid option is selected
                        discountInput.prop('disabled', false);
                    } else {
                        // Disable the discount input if no valid option is selected
                        discountInput.prop('disabled', true);
                    }
                    // Trigger validation after discMode change
                    validateAmount(uniqueId);
                });
                // Function to show alert message
                function showAlert(message) {
                    $('#alertMessage').text(message).removeClass('d-none').addClass('alert alert-danger');
                }
            });
        });
        function fetchDiscmodeOptions(uniqueId) {
            $.ajax({
                url: '/auth/purchase/discmode',
                method: 'GET',
                dataType: 'json',
                success: function (response) {
                    console.log('Received response for discmode options:', response);
                    var options = response.data;
                    if (options && options.length) {
                        var discModeDropdown = $('#discMode_' + uniqueId);
                        discModeDropdown.find('option').remove();
                        discModeDropdown.append($('<option>', {
                            selected: 'selected',
                            disabled: 'disabled',
                            text: 'Select Disc Mode'
                        }));
                        options.forEach(function (option) {
                            discModeDropdown.append($('<option>', {
                                value: option.id,
                                text: option.discMode
                            }));
                        });
                        console.log('Dropdown values:', discModeDropdown.val());
                    } else {
                        console.error('No options found for discmode');
                    }
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching discmode options:', error);
                }
            });
        }
        function calculateTotals() {
            let totalAmount = 0;
            let totalCGST = 0;
            let totalSGST = 0;
            let totalIGST = 0;
            let totalNetAmount = parseFloat($('#supplierinvoiceamount').val()) || 0;

            $('#customerTable tbody tr').each(function () {
                let row = $(this);
                let amount = parseFloat(row.find('input[name="amount"]').val()) || 0;
                let cgst = parseFloat(row.find('input[name="cgst"]').val()) || 0;
                let sgst = parseFloat(row.find('input[name="sgst"]').val()) || 0;
                let igst = parseFloat(row.find('input[name="igst"]').val()) || 0;

                totalAmount += amount;
                totalCGST += cgst;
                totalSGST += sgst;
                totalIGST += igst;
            });

            let totalTax = totalCGST + totalSGST + totalIGST;

            $('#pamount').text(totalAmount.toFixed(2));
            $('#pcgst').text(totalCGST.toFixed(2));
            $('#psgst').text(totalSGST.toFixed(2));
            $('#pigst').text(totalIGST.toFixed(2));
            $('#pnetAmount').text(totalNetAmount.toFixed(2));
            $('#psubtotal').text((totalAmount).toFixed(2));

            $('#pamount_').val(totalAmount.toFixed(2));
            $('#pcgst_').val(totalCGST.toFixed(2));
            $('#psgst_').val(totalSGST.toFixed(2));
            $('#pigst_').val(totalIGST.toFixed(2));
            $('#pnetAmount_').val(totalNetAmount.toFixed(2));
            $('#psubtotal_').val((totalAmount).toFixed(2));

            let subtotal = parseFloat($('#psubtotal').text()) || 0;
            let netAmount = parseFloat($('#pnetAmount').text()) || 0;

            let discMode = $('#pdiscMode').val() || "3";
            let discount = parseFloat($('#pdiscount').val()) || 0;

            if (isNaN(discount)) {
                discount = 0;
            }

            if (discMode === "3" || discMode === "N/A") {
                discount = 0;
                $('#pdiscount').val('0');
            } else if (discMode === "percentage" || discMode === "1") {
                discount = (subtotal * discount) / 100;
            }

            subtotal -= discount;

            // Implement rounding rule for subtotal
            let roundedSubtotal = Math.round(subtotal);

            // Calculate roundOff
            let roundOff = 0;

            // Update values with rounded subtotal
            $('#psubtotal').text(roundedSubtotal.toFixed(2));
            $('#psubtotal_').val(roundedSubtotal.toFixed(2));

            $('#proundOff').text(roundOff.toFixed(2));
            $('#proundOff_').val(roundOff.toFixed(2));

            var discModeId = $('#pdiscMode').val();
            $('#pdiscMode_').val(discMode);
            $('#pdiscount_').val(discount.toFixed(2));
        }


        $('#pdiscMode, #pdiscount').change(function () {
            calculateTotals();
        });

        $(document).on('click', '#addmanufacturer', function () {
            $("#manufacturerform").show();
            $("#id").val('');
        });

        var table = $("#customerTable").DataTable({
            searching: false,
            paging: false,
            scrollY: '400px',
            scrollX: true,
            columns: [
                { data: 'Id' },
                { data: 'product' },
                { data: 'batchNo' },
                { data: 'tax' },
                { data: 'quantity' },
                { data: 'free', className: 'd-none' },
                { data: 'uom', className: 'd-none' },
                { data: 'purcRate' },
                { data: 'mrp', className: 'd-none' },
                { data: 'rate' },
                { data: 'discMode' },
                { data: 'discount' },
                { data: 'amount' },
                { data: 'cgst', className: 'd-none' },
                { data: 'sgst', className: 'd-none' },
                { data: 'igst', className: 'd-none' },
                { data: 'totalAmount', className: 'd-none' },
                {
                    data: 'Id',
                    render: function (data) {
                        return '<i class="fa-solid fa-trash div deletetransBtn" type="button" data-id="' + data + '"></i>';
                    }
                }
            ],
            scrollCollapse: false,
            responsive: true,
            bInfo: true,
            bBorders: true,
            fixedColumns: {
                leftColumns: 1
            }

        });


        table.column('.action').visible(false);

        // Toggle visibility of the action column and buttons when Edit button is clicked
        $('.editmasbtn').click(function () {
            var isVisible = table.column('.action').visible();
            table.column('.action').visible(!isVisible);


        });

        $('#purchaseId').on('change', function () {
            var selectedPurchaseId = $(this).val();
            table.ajax.url('/auth/salesretail/salesretailproductid?purchaseId=' + selectedPurchaseId).load();
        });

        if (table.data().count() === 0) {
            console.log("No data available in table");
        }

        if (table.rows().count() === 0) {
            $("#emptyMessage").show();
        }

        $(document).ready(function () {
            var companyState;
            var totalAmount = 0;

            $('#customerTable tbody').on('input', 'input[name^="rate"], input[name^="quantity"], select[name^="discMode"], input[name^="discount"]', function () {
                var row = $(this).closest('tr');
                var rate = parseFloat(row.find('input[name^="rate"]').val()) || 0;
                var quantity = parseFloat(row.find('input[name^="quantity"]').val()) || 0;
                var discMode = row.find('select[name^="discMode"]').val();
                var discountInput = row.find('input[name^="discount"]');

                if (discMode === '3') {
                    discountInput.val('0');
                }

                var discount = parseFloat(discountInput.val()) || 0;
                var amount = calculateAmount(rate, quantity, discMode, discount);

                row.find('input[name^="amount"]').val(amount.toFixed(2));

                calculateTax(row);  // This will now calculate inclusive tax
                calculateTotals();
                calculateTotalAmount();
            });

            function calculateTotalAmount() {
                $('#customerTable tbody tr').each(function () {
                    var row = $(this);
                    var amount = parseFloat(row.find('input[name^="amount"]').val()) || 0;
                    var cgst = parseFloat(row.find('input[name^="cgst"]').val()) || 0;
                    var sgst = parseFloat(row.find('input[name^="sgst"]').val()) || 0;
                    var igst = parseFloat(row.find('input[name^="igst"]').val()) || 0;

                    var totalTax = cgst + sgst + igst;
                    var rowTotalAmount = amount;  // Amount in inclusive tax method doesn't change
                    row.find('input[name^="totalAmount"]').val(rowTotalAmount.toFixed(2));
                });
            }

            // Calculate amount after applying discount
            function calculateAmount(rate, quantity, discMode, discount) {
                var calculatedAmount = 0;

                if (discMode === 'N/A' || discMode === '3') {
                    discount = 0;
                } else if (discMode === 'percentage' || discMode === '1') {
                    rate = rate * (1 - discount / 100);
                } else {
                    rate = rate - discount;
                }

                // Inclusive of tax, so the rate is already with tax
                calculatedAmount = rate * quantity;

                return calculatedAmount;
            }

            // Modify the tax calculation to be inclusive
            function calculateTax(row) {
                var totalAmount = parseFloat(row.find('input[name^="amount"]').val()) || 0;
                var taxRate = parseFloat(row.find('input[name^="tax"]').val()) || 0;

                // Calculate tax inclusively: Amount already includes tax
                var preTaxAmount = totalAmount / (1 + taxRate / 100);
                var totalTax = totalAmount - preTaxAmount;

                var cgst = (totalTax / 2).toFixed(2);
                var sgst = (totalTax / 2).toFixed(2);
                var igst = 0;

                row.find('input[name^="cgst"]').val(cgst);
                row.find('input[name^="sgst"]').val(sgst);
                row.find('input[name^="igst"]').val(igst);
                row.find('input[name^="totalTax"]').val(totalTax.toFixed(2));

                calculateTotalAmount();
            }

            function fetchCompanyState() {
                $.ajax({
                    url: '/auth/purchase/companystate',
                    method: 'GET',
                    success: function (response) {
                        companyState = response.data[0].state;
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching Company State:', error);
                    }
                });
            }

            function fetchSupplierNames() {
                $.ajax({
                    url: '/auth/salesretail/customername',
                    method: 'GET',
                    success: function (response) {
                        var options = response.data;
                        if (options && options.length) {
                            options.forEach(function (option) {
                                var $option = $('<option>', {
                                    value: option.id,
                                    text: option.ledgername,
                                    'data-mobile': option.mobile
                                });
                                $('.dropdown[name="customername"]').append($option);
                            });
                            $('.dropdown[name="customername"]').change();
                        } else {
                            console.error('No options found for Customer Name');
                        }
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching options for Customer Name:', error);
                    }
                });
            }

            $('.dropdown[name="customername"]').change(function () {
                var selectedMobile = $(this).find(':selected').data('mobile');
                $('#customermobileno').val(selectedMobile).show();
            });

            fetchCompanyState();
            fetchSupplierNames();
        });



        $('.dropdown[name="customername"]').on('change', function () {
            var selectedSupplier = $(this).val();
            console.log('Selected Supplier:', selectedSupplier);
            initiateFetchCompanyState(selectedSupplier);
        });

        function initiateFetchCompanyState(customerState) {
            fetchCompanyStateAndCalculateTax(customerState);
        }

        function fetchCompanyStateAndCalculateTax(customerState) {
            $.ajax({
                url: '/auth/purchase/companystate',
                method: 'GET',
                success: function (response) {
                    console.log('Received response for Company State:', response);
                    companyState = response.data[0].state;
                    console.log('Company State:', companyState);
                    calculateTaxForAllRows(customerState, companyState);
                },
                error: function (xhr, status, error) {
                    console.error('Error fetching Company State:', error);
                }
            });
        }

        function calculateTaxForAllRows(customerState, companyState) {
            $('#customerTable tbody tr').each(function () {
                var row = $(this);
                calculateTax(row, customerState, companyState);
            });
        }

        var rowDetails;

        $.ajax({
            url: '/auth/salesretail/salesretailids',
            method: 'GET',
            data: { view: 'salesids' },
            success: function (response) {
                console.log('Received response for Purchase IDs:', response);

                var options = response.data;
                console.log('Options:', options);

                if (options && options.length) {
                    options.forEach(function (row) {
                        if (row.id !== undefined && row.id !== null && !isNaN(row.id)) {
                            var saledate = formatDate(row.saledate);

                            var optionHtml =
                                '<option value=\'' +
                                JSON.stringify(row) +
                                '\'>' +
                                '<strong>ID: </strong>' + row.id +
                                ',<strong>Customer Name:</strong> ' + row.customername +
                                ',<strong>Customer Mobile No: </strong>' + row.customermobileno +
                                ',<strong> Sale Date: </strong>' + saledate +
                                '</option>';

                            $('.dropdown[name="Id"]').append(optionHtml);
                        } else {
                            console.warn('Skipping option with invalid ID:', row);
                        }
                    });
                } else {
                    console.error('No options found for sales IDs');
                }

                var urlParams = new URLSearchParams(window.location.search);
                var purchaseIdParam = urlParams.get('id');
                console.log('Purchase ID from URL:', purchaseIdParam);

                if (purchaseIdParam) {
                    var purchaseIdInt = parseFloat(purchaseIdParam);

                    $('.dropdown[name="Id"] option').each(function () {
                        var optionValue = $(this).val();
                        if (optionValue !== 'view details') {
                            var optionRow = JSON.parse(optionValue);
                            if (optionRow.id === purchaseIdInt) {
                                $(this).prop('selected', true);
                            }
                        }
                    });

                    $('.dropdown[name="Id"]').change();
                }
            },
            error: function (xhr, status, error) {
                console.error('Error fetching options for sales IDs:', error);
            }
        });

        $('.dropdown[name="Id"]').change(function () {
            var selectedOption = $(this).find('option:selected');
            if (!selectedOption || !selectedOption.val()) {
                return;
            }

            try {
                var rowDetails = JSON.parse(selectedOption.val());
                $('#id').val(rowDetails.id);
                $('#saledate').val(formatDate(rowDetails.saledate));

                // Set the customer in the dropdown using selectcustomer from rowDetails
                console.log('Setting customer ID:', rowDetails.selectcustomer);
                $('#customerId').val(rowDetails.selectcustomer); // Make sure 'selectcustomer' is the customerId
                $('#doctorname').val(rowDetails.doctorname);
                $('#customername').val(rowDetails.customername);
                $('#mobileno').val(rowDetails.mobileno);
                // Load existing data into the form
                $('#paymentmode').val(rowDetails.paymentmode);
                $('#ppaymentMode').val(rowDetails.paymentmode); // Ensure hidden input is also set


                // Populate financial details
                $('#pnetAmount').text(parseFloat(rowDetails.netAmount).toFixed(2));
                $('#pamount').text(parseFloat(rowDetails.amount).toFixed(2));
                $('#pigst').text(parseFloat(rowDetails.igst).toFixed(2));
                $('#pcgst').text(parseFloat(rowDetails.cgst).toFixed(2));
                $('#psgst').text(parseFloat(rowDetails.sgst).toFixed(2));
                $('#psubtotal').text(parseFloat(rowDetails.subtotal).toFixed(2));
                $('#ptcs').text(parseFloat(rowDetails.tcs).toFixed(2));
                $('#proundOff').text(parseFloat(rowDetails.roundoff).toFixed(2));

                // Set discount mode and value
                $('#pdiscMode').val(rowDetails.discMode);
              
                $('#pdiscount').val(rowDetails.discount);

                // Fetch related product data
                var purchaseId = parseFloat(rowDetails.id);
                $.ajax({
                    url: '/auth/salesretail/salesretailproductid',
                    method: 'GET',
                    data: { purchaseId: purchaseId },
                    success: function (response) {
                        updateCustomerTable(response.data);
                    },
                    error: function (xhr, status, error) {
                        console.error('Error fetching ProductId data:', error);
                    }
                });
            } catch (error) {
                console.error('Error parsing JSON:', error);
            }
        });

        function updateCustomerTable(data) {
            var table = $('#customerTable').DataTable();
            table.clear().rows.add(data).draw();
        }

        function updateCustomerTable(data) {
            var table = $('#customerTable').DataTable();
            table.clear().rows.add(data).draw();
        }

        function formatDate(dateObject) {
            const date = new Date(dateObject);
            const year = date.getFullYear();
            const month = String(date.getMonth() + 1).padStart(2, '0');
            const day = String(date.getDate()).padStart(2, '0');
            return `${year}-${month}-${day}`;
        }

        $(document).ready(function () {
            $('#new').click(function () {
                window.location.href = '/salesretail'
            });
        });
    </script>
</body>
</html>