<!DOCTYPE html>
<html lang="en">
<head>
  
 {{>header}}

  <style>
   
    #adduser {
              
              display: none;
              position: fixed;
              top: 50%;
              left: 50%;
              transform: translate(-50%, -50%);
              background-color: #8f8f8f; /* White background for the form */
              padding: 20px;
              z-index: 1000; /* Ensure it's above other elements */
              border-radius: 10px;
              justify-content: space-between;
              align-content: space-between;
              align-items: center;
          }
          #adduser input {
            margin:2px;
            padding: 2px;
          }
          #adduser select{
            margin:2px;
            padding: 2px;
          }
          #adduser button{
            width: fit-content;
            margin: 2px;
          }
          .dt-button  {
      margin-bottom: 2px; /* Adjust margin as needed */
      background-color: aqua;
   }
  .editBtn {
    width: fit-content;
    color: rgb(141, 64, 214);
    margin: 2px;
    padding: 2px;
    align-items: center;
    
  }
  .deleteBtn {
    width: fit-content;
    color: rgb(224, 47, 47);
    margin: 2px;
    padding: 2px;
    align-items: center;
  }
   table {
      border-collapse: collapse;
      width: 100%;
    } 
     .btn{
     margin: 5px;
      justify-content:space-around;
      width: 100px;
      padding: 5px;
      align-content: center;
    }
    th, td {
      border: 0px solid #dddddd;
      text-align: center;
      padding: 5px;
    }

    input {
      width: 100%; /* Make the input box take 100% width of its container */
      box-sizing: border-box; /* Include padding and border in the width */
      vertical-align:middle; /* Align the input vertically in the middle */
    }
      .password-container {
      position: relative;
    }
.password-toggle {
    background-color: white !important;
    position: absolute;
    right: 5px;
    top: 75%;
    border: rgb(255, 255, 255);
    transform: translateY(-50%);
    cursor: pointer;
}

.dark-version .password-toggle {
       background-color: #202e5c !important;
    color: white !important;
    position: absolute;
    right: 5px;
    top: 75%;
    border:#202e5c;
    transform: translateY(-50%);
    cursor: pointer;
}

      </style>
 
</head>

<body class="g-sidenav-show   bg-gray-100">
  {{>sidebar}}
  <main class="main-content position-relative border-radius-lg ">
      {{>navbar}}

    <div class="table-responsive container-fluid py-4  ">
        <div class=" form-control card ">

            <h3>User Profile</h3>
             <div class="form-container">
  <form id="userForm">
    <div class="row">

 
    <div class="col">
  <div>
    <input type="hidden"  name ="id" id="id">
      <label for="username">Username:</label>
      <input type="text" id="username" name="username" required>
    </div>
 <div class="password-container">
            <label for="password">Password:</label>
            <input type="password" id="password" name="password" required>
            <button type="button" class="password-toggle" id="togglePassword"><i class="fa fa-eye-slash" aria-hidden="true"></i></button>
          </div>
    </div>

  <div class="col">
    <div>
      <label for="email">Email:</label>
      <input type="email" id="email" name="email" required>
    </div>
    <div>
      <label for="role">Role:</label>
      <input type="text" id="role" name="role"  autocomplete="off" required maxlength="50">
<input type="hidden" id="roleId" name="roleId"  >
    </div>
  </div>
   </div>
    <!-- Add more fields as needed -->
   <div >
    <button type="submit" id="submitBtn" class="btn btn-primary">Create User</button>
    <button type="button" id="updateBtn" class="btn btn-primary" style="display: none;">Update User</button>
</div>


  </form>
</div>
        </div></div>

     <div class="table-responsive container-fluid py-4  ">
        <div class=" form-control card ">
<div class="form-container">
            <div class="row">
        <form action="/auth/user" method="get">
                <table id="productTable" class="table-responsive justify-content-between align-items-end display text-align-center"  style="width:100%">
                <h5>User Details</h5>
                    <thead>
                      
                        <tr>
                          <th ></th>
                            <th>Id</th>
                            <th>User Name</th>
                            <th>Email Id</th>
                            <th></th>
                            <th>Role</th>
                            <th class="action">Action</th> 
                        </tr>
                    </thead>
                    <tbody class="table-body card-body tbody align-items-center text-align-center" >
                     
                       
                    </tbody>
                  
                </table>
                </form>
                {{!-- <button id="addform"  class="btn  btn-primary">Add</button> --}}
            </div>
   </div>
        </div></div>

<script>

// Edit button click event
    $('#productTable').on('click', '.editBtn', function() {
        var rowData = table.row($(this).parents('tr')).data();
        $("#id").val(rowData.id);
        $("#username").val(rowData.userid);
        $("#email").val(rowData.emailid);
      
    $("#role").val(rowData.roles);
        $("#roleId").val(rowData.role);
        $("#adduser").show();
        $('#updateBtn').show(); // Show the update button
        $('#submitBtn').hide(); // Hide the submit button
    });


// Event handler for update button click
$('#updateBtn').click(function(event) {
    event.preventDefault(); // Prevent the default form submission behavior
    
    // Retrieve form data
    var formData = {
        id: $('#id').val(),
        username: $('#username').val(),
        email: $('#email').val(),
        roleId: $('#roleId').val(),
        password: $('#password').val().trim() // Trim the password to remove leading/trailing spaces
    };

    // Validate password field
    if (!formData.password) {
        alert('Please Re-enter or change a password.');
        return; // Exit the function if password is empty
    }
    
    // AJAX request to edit/update user details
    $.ajax({
        url: '/auth/user/updateUser',
        method: 'POST',
        contentType: 'application/json',
        data: JSON.stringify(formData),
        success: function(response) {
            console.log('User updated successfully:', response);
            alert('User updated successfully!');
            // Reload the page or update the table data if needed
            window.location.reload();
        },
        error: function(xhr, status, error) {
            console.error('Error updating user:', error);
            // Handle error scenario
            alert('An error occurred while updating the user. Please try again.');
        }
    });
});

            var id = ''; 
            
            var table = $('#productTable').DataTable({
                scrollY: '350px',
                paging: false,
                searching: false,
                scrollCollapse: true,
                responsive: true,
                ajax: {
                    url: "/auth/user",
                    type: 'GET',
                    dataSrc: "data"
                },
                columns: [
                    { data: "id" },
                    { data: "id" }, // Assuming this is another "id" column from your database
                    { data: "userid" },
                    { data: "emailid" },
                    {data:"role"},
                    { 
                        data: "roles", 
                        render: function(data, type, row) {
                            // Render the role value
                            return data;
                        }
                    },
                    {
                        data: 'id',
                        render: function (data) {
                            return '<i class="fa-regular fa-pen-to-square editBtn" type="button" data-id="' + data + '"></i>' +
                                ' <i class="fa-solid fa-trash deleteBtn" type="button" data-id="' + data + '"></i>';
                        }
                    }
                ],
                columnDefs: [
                    { targets: [0,4], visible: false } // Hide the first column (index 0)
                ]
            });


$(document).on('click', '.deleteBtn', function(event) {
    event.preventDefault(); // Prevent the default behavior of the click event
    
    // Retrieve the data ID from the button's data attribute
    var id = $(this).data('id');
    
    // Show confirmation dialog
    var confirmDelete = confirm("Are you sure you want to delete this record?");
    
    // Store reference to 'this'
    var that = this;
    
    // If user confirms deletion
    if (confirmDelete) {
        // AJAX request to delete the record
        $.ajax({
            url: '/auth/user/deleteUser/' + id, // Replace with your API endpoint
            type: 'DELETE',
            success: function(response) {
                console.log('Record deleted successfully:', response);
                    ajax.table.reload();
            },
            error: function(xhr, status, error) {
                console.error('Error deleting record:', error);
                // Handle the error scenario
            }
        });
    }
});



$(document).ready(function() {
    $('#userForm').submit(function(event) {
        event.preventDefault();
        var formData = {
            username: $('#username').val(),
            password: $('#password').val(),
            email: $('#email').val(),
            role: $('#roleId').val()
        };
        $.ajax({
            url: '/auth/user/create',
            method: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(formData),
            success: function(response) {
                console.log('User created successfully:', response);
                alert('User created successfully!');
                location.reload(); 
            },
            error: function(xhr, status, error) {
                console.error('Error creating user:', error);
                if (xhr.responseJSON && xhr.responseJSON.error === 'Email already exists') {
                    alert('Email already exists. Please choose a different email.');
                } else {
                    alert('An error occurred while creating the user. Please try again.');
                }
            }
        });
    });
});

$.ajax({
    url: '/auth/user/getrole',
    method: 'GET',
    success: function(response) {
        console.log('Received response for roles:', response);
        var options = response.data;

        if (options && options.length) {
            var roleNames = options.map(option => option.role);
            var roleIds = options.map(option => option.id);

            $('#role').autocomplete({
                source: roleNames,
                minLength: 1,
                select: function(event, ui) {
                    var selectedRole = ui.item.value;
                    var selectedRoleId;

                    for (var i = 0; i < roleNames.length; i++) {
                        if (roleNames[i] === selectedRole) {
                            selectedRoleId = roleIds[i];
                            break; 
                        }
                    }
                    console.log('Selected role:', selectedRole);
                    console.log('ID:', selectedRoleId);
                    $('#roleId').val(selectedRoleId);
                },
                open: function(event, ui) {
                    var menu = $(this).autocomplete("widget");
                    var maxHeight = 200;
                    menu.css({
                        "max-height": maxHeight,
                        "overflow-y": "auto"
                    });
                }
            });
        } else {
            console.error('No options found for roles');
        }
    },
    error: function(xhr, status, error) {
        console.error('Error fetching options for roles:', error);
    }
});

   const passwordInput = document.getElementById('password');
    const toggleButton = document.getElementById('togglePassword');

    toggleButton.addEventListener('click', () => {
      const type = passwordInput.getAttribute('type') === 'password' ? 'text' : 'password';
      passwordInput.setAttribute('type', type);
       toggleButton.querySelector('i').classList.toggle('fa-eye-slash');
      toggleButton.querySelector('i').classList.toggle('fa-eye');
     
    });
        // Add form button click event
         // Add form button click event
         $("#addform").click(function() {
            $("#adduser").show();
            $("#username").val('');
        });
        // Save product button click event
        $("#saveform").click(function() {
            var name = $("#username").val();
            var batchno = $("#userid").val();
            var tax = $("#password").val();
            if (id === '') {
                // Create a new row in the table
                var newRow = [
                    name, batchno, tax, 
                    '<i class="fa-solid fa-pen-to-square editBtn"></i> <i class="fa-solid fa-trash deleteBtn"></i>'
                ];
                // Add the new row to the table
                table.row.add(newRow).draw();
            } else {
                // Update an existing row in the table
                var rowData = [
                    name, batchno, tax,
                    '<i class="fa-solid fa-pen-to-square editBtn"></i> <i class="fa-solid fa-trash deleteBtn"></i>'
                ];
                var row = table.row(function (idx, data, node) {
                    return data[0] === id;
                });
                row.data(rowData).draw();
            }
            // Clear the form inputs and hide the form
            $("#adduser input").val('');
            $("#adduser").hide();
            id = ''; // Reset id after saving
        });
        // Close form button click event
        $("#closeform").click(function() {
            $("#adduser").hide();
            id = ''; // Reset id when closing the form
        });
        // Edit button click event
        $('#productTable').on('click', '.editBtn', function() {
            var data = table.row($(this).parents('tr')).data();
            var rowData = data.slice(0, -1); // Exclude the "Actions" column
            $("#username").val(data[0]);
            $("#userid").val(rowData[1]);
            $("#password").val(rowData[2]);
            $("#adduser").show();
            id = data[0]; // Set the id when editing
        });
        // Delete button click event
        $('#productTable').on('click', '.deleteBtn', function() {
            table.row($(this).parents('tr')).remove().draw();
            if (table.rows().count() === 0) {
                // Show empty message if the table is empty
                $("#emptyMessage").show();
            }
        });

  document.getElementById('adduser').addEventListener('submit', function(event) {
      event.preventDefault(); // Prevents the default form submission behavior
      // Your custom form submission logic here (e.g., using AJAX)
  });
</script>
{{>footer}}

  
  </main>
{{>color}}
  

</body>

</html>